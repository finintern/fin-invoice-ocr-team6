{
	"info": {
		"_postman_id": "250ab2eb-b108-4e40-a9fe-204374faee3a",
		"name": "API Documentation Copy",
		"description": "API Purchase Order & Invoice Reader fineksi dibuat untuk memberikan kemudahan bagi partner dalam menganalisis dan mengelola dokumen PO dan invoice yang mereka miliki.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29703395",
		"_collection_link": "https://fineksi-6.postman.co/workspace/Sprint-1~28590573-857b-4507-94a4-b601aa70d10e/collection/29703395-250ab2eb-b108-4e40-a9fe-204374faee3a?action=share&source=collection_link&creator=29703395"
	},
	"item": [
		{
			"name": "Invoice Upload",
			"item": [
				{
					"name": "Upload Invoice Succesful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test for response time\r",
									"pm.test(\"Response time is less than 10000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
									"});\r",
									"\r",
									"// Test for content type\r",
									"pm.test(\"Content-Type is present and is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// Test for message and invoice details\r",
									"pm.test(\"Response contains message and invoice details\", function () {\r",
									"    pm.expect(pm.response.json().message.message).to.equal(\"Invoice successfully processed and saved\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "../functional_test_files/test-valid.pdf"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/invoices/upload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"upload"
							]
						},
						"description": "Upload invoice berupa file PDF."
					},
					"response": []
				},
				{
					"name": "Invalid File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code\r",
									"pm.test(\"Status code is 415\", function () {\r",
									"    pm.response.to.have.status(415);\r",
									"});\r",
									"\r",
									"// Test for response time\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"// Test for message in the response body\r",
									"pm.test(\"Message is 'File format is not PDF'\", function () {\r",
									"    pm.expect(pm.response.json().message).to.equal(\"File format is not PDF\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "../functional_test_files/test-nonpdf.txt"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/invoices/upload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"upload"
							]
						},
						"description": "Upload invoice berupa file PDF."
					},
					"response": [
						{
							"name": "415",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "client_id",
										"value": "{{client_id}}",
										"type": "text"
									},
									{
										"key": "client_secret",
										"value": "{{client_secret}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "https://drive.google.com/file/d/12iAxeIeOnrwytxDE_jFyk5S6hkhXu2Wh/view?usp=drive_link"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/api/invoices/upload",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"invoices",
										"upload"
									]
								}
							},
							"status": "Unsupported Media Type",
							"code": 415,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Alt-Svc",
									"value": "h3=\":443\"; ma=2592000"
								},
								{
									"key": "Content-Length",
									"value": "36"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Thu, 13 Mar 2025 07:22:22 GMT"
								},
								{
									"key": "Etag",
									"value": "W/\"24-7plzlkpR6ZjTq7GW8tERJq4QKns\""
								},
								{
									"key": "Server",
									"value": "Caddy"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"File format is not PDF\"\n}"
						}
					]
				},
				{
					"name": "Missing File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test for response time\r",
									"pm.test(\"Response time is less than 50ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(50);\r",
									"});\r",
									"\r",
									"// Test for the presence of message in the response body\r",
									"pm.test(\"Response contains message\", function () {\r",
									"    pm.expect(pm.response.json().message).to.exist;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/invoices/upload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Encrypted File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test for response message\r",
									"pm.test(\"Response message is 'PDF is encrypted'\", function () {\r",
									"    pm.expect(pm.response.json().message).to.equal(\"PDF is encrypted\");\r",
									"});\r",
									"\r",
									"// Test for content type header\r",
									"pm.test(\"Content-Type is present and is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "../functional_test_files/test-encrypted.pdf"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/invoices/upload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"upload"
							]
						},
						"description": "Upload invoice berupa file PDF."
					},
					"response": []
				},
				{
					"name": "Unauthorized Client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body has a message field\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Response body message is 'Unauthorized: Invalid credentials'\", function () {\r",
									"    pm.expect(pm.response.json().message).to.equal(\"Unauthorized: Invalid credentials\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "secret",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "../functional_test_files/test-valid.pdf"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/invoices/upload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reject > 20 MB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code is 413\", function () {\r",
									"    pm.response.to.have.status(413);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body has message field\", function () {\r",
									"    pm.response.to.have.jsonBody('message');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							},
							{
								"key": "client_id",
								"value": "surya",
								"type": "text",
								"disabled": true
							},
							{
								"key": "client_secret",
								"value": "suryasecret",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "../functional_test_files/test-80mb.pdf"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/invoices/upload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"upload"
							]
						}
					},
					"response": []
				}
			],
			"description": "_Endpoint_ `/api/invoice` berfungsi untuk melakukan fungsionalitas yang berkaitan dengan _invoice_."
		},
		{
			"name": "Get Invoice",
			"item": [
				{
					"name": "Get Invoice By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test for response time\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"// Test for content type\r",
									"pm.test(\"Content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// Test for specific fields in the response body\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Invoice details are present\", function () {\r",
									"    pm.expect(jsonData.header.invoice_details).to.exist;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/invoices/1933",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"1933"
							]
						},
						"description": "Mengambil invoice berdasarkan invoice_id."
					},
					"response": []
				},
				{
					"name": "Unauthorized Client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"// Test for response time\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"// Test for message in the response body\r",
									"pm.test(\"Response body contains message\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Unauthorized: Invalid credentials\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "secret",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/invoices/{{invoice_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"{{invoice_id}}"
							]
						},
						"description": "Mengambil invoice berdasarkan invoice_id."
					},
					"response": [
						{
							"name": "401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "client_id",
										"value": "{{client_id}}",
										"type": "text"
									},
									{
										"key": "client_secret",
										"value": "secret",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/invoices/{{invoice_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"invoices",
										"{{invoice_id}}"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Alt-Svc",
									"value": "h3=\":443\"; ma=2592000"
								},
								{
									"key": "Content-Length",
									"value": "47"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Thu, 13 Mar 2025 07:54:04 GMT"
								},
								{
									"key": "Etag",
									"value": "W/\"2f-E2vzuxNiaGhv1SVS72hV09vjAvI\""
								},
								{
									"key": "Server",
									"value": "Caddy"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Unauthorized: Invalid credentials\"\n}"
						}
					]
				},
				{
					"name": "Nonexistent ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body has message field\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Message field value is 'Invoice not found'\", function () {\r",
									"    pm.expect(pm.response.json().message).to.equal('Invoice not found');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/invoices/100000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"100000"
							]
						},
						"description": "Mengambil invoice berdasarkan invoice_id."
					},
					"response": []
				},
				{
					"name": "Negative ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test for response time\r",
									"pm.test(\"Response time is less than 100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});\r",
									"\r",
									"// Test for content type\r",
									"pm.test(\"Content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// Test for message field in the response body\r",
									"pm.test(\"Message field exists in the response\", function () {\r",
									"    pm.expect(pm.response.json().message).to.exist;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/invoices/-1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"-1"
							]
						},
						"description": "Mengambil invoice berdasarkan invoice_id."
					},
					"response": [
						{
							"name": "400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "client_id",
										"value": "{{client_id}}",
										"type": "text"
									},
									{
										"key": "client_secret",
										"value": "{{client_secret}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/invoices/-1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"invoices",
										"-1"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Alt-Svc",
									"value": "h3=\":443\"; ma=2592000"
								},
								{
									"key": "Content-Length",
									"value": "32"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Thu, 13 Mar 2025 07:54:24 GMT"
								},
								{
									"key": "Etag",
									"value": "W/\"20-CyO/tajpfGyM1hJgi5HBcVkBRmY\""
								},
								{
									"key": "Server",
									"value": "Caddy"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Invalid invoice ID\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Red Team vs Blue Team",
			"item": [
				{
					"name": "SQL Injection Attack",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test for response time",
									"pm.test(\"Response time is less than 50ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(50);",
									"});",
									"",
									"// Test for content type header",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Test for specific message in the response body",
									"pm.test(\"Response contains message: Invalid invoice ID\", function () {",
									"    pm.expect(pm.response.json().message).to.equal(\"Invalid invoice ID\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/invoices/1; DROP TABLE Invoice;",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"1; DROP TABLE Invoice;"
							]
						},
						"description": "Simulate SQL injection attack."
					},
					"response": []
				},
				{
					"name": "Defense Against SQL Injection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test for response message",
									"pm.test(\"Verify response contains invoice_details\", function () {",
									"    pm.expect(pm.response.json().header.invoice_details).to.exist;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/invoices/933",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"933"
							]
						},
						"description": "Verify defense against SQL injection."
					},
					"response": []
				}
			],
			"description": "Simulate red team vs blue team scenario."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}