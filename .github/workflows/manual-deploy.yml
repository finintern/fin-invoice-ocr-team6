<<<<<<< HEAD
name: Manual Rollback
=======
name: Manual Blue-Green Deployment & Rollback
>>>>>>> 184afa7 (fix manual deploy workflow)

on:
  workflow_dispatch:
    inputs:
      rollback_version:
        description: 'Versi release untuk rollback (misal: 1.3.0-abc123de). Kosongkan untuk rollback otomatis.'
        required: false

jobs:
<<<<<<< HEAD
  rollback:
    name: Manual Rollback to Previous Version
=======
  deploy:
    name: Deploy Application (Blue-Green)
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'deploy'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Set up Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: backend/package-lock.json

      - name: Install Dependencies
        working-directory: backend
        run: npm install

      - name: Build Application
        working-directory: backend
        run: npm run build
        env:
          NODE_ENV: ${{ github.event.inputs.environment }}

      - name: Generate Version ID
        run: |
          VERSION=$(date +'%Y%m%d%H%M%S')-${GITHUB_SHA::8}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "🏷️ Generated Version ID: $VERSION"
          echo "📝 Details:"
          echo "   - Branch: ${{ github.ref_name }}"
          echo "   - Commit: ${GITHUB_SHA::8}"
          echo "   - Timestamp: $(date +'%Y%m%d%H%M%S')"

      - name: Install SSH client
        run: sudo apt-get install openssh-client

      - name: Create SSH Key
        run: echo "${{ secrets.SSH_KEY }}" > ssh-key.pem

      - name: Update SSH Key Permission
        run: chmod 400 ssh-key.pem

      - name: Set up Environment Variables
        run: |
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "NODE_ENV=${{ github.event.inputs.environment }}" >> .env
          echo "CLIENT_ID=${{ secrets.CLIENT_ID }}" >> .env
          echo "CLIENT_SECRET=${{ secrets.CLIENT_SECRET }}" >> .env
          echo "AZURE_ENDPOINT=${{ secrets.AZURE_ENDPOINT }}" >> .env
          echo "AZURE_KEY=${{ secrets.AZURE_KEY }}" >> .env
          echo "AZURE_INVOICE_MODEL=${{ secrets.AZURE_INVOICE_MODEL }}" >> .env
          echo "AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }}" >> .env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env
          echo "DSN=${{ secrets.DSN }}" >> .env
          echo "NEW_RELIC_LICENSE_KEY=${{ secrets.NEW_RELIC_LICENSE_KEY }}" >> .env
          echo "NEW_RELIC_ENABLED=true" >> .env

      - name: Create New Relic Configuration
        run: |
          # Create newrelic.js configuration
          cat > newrelic.js << 'EOF'
          'use strict'
          exports.config = {
            app_name: [process.env.NEW_RELIC_APP_NAME || 'invoice-ocr-backend'],
            license_key: process.env.NEW_RELIC_LICENSE_KEY,
            logging: {
              level: 'info'
            },
            allow_all_headers: true,
            distributed_tracing: {
              enabled: true
            },
            attributes: {
              exclude: [
                'request.headers.cookie',
                'request.headers.authorization',
                'request.headers.proxyAuthorization',
                'request.headers.setCookie*',
                'request.headers.x*',
                'response.headers.cookie',
                'response.headers.authorization',
                'response.headers.proxyAuthorization',
                'response.headers.setCookie*',
                'response.headers.x*'
              ]
            }
          }
          EOF

      - name: Setup Directory Structure
        run: |
          ssh -o StrictHostKeyChecking=no -i ssh-key.pem ${{ secrets.USERNAME }}@${{ secrets.SERVER_IP }} "
            # Create necessary directories if they don't exist
            mkdir -p ~/fin-invoice-ocr-team6/releases
            mkdir -p ~/fin-invoice-ocr-team6/backups
            mkdir -p ~/fin-invoice-ocr-team6/shared
            mkdir -p ~/fin-invoice-ocr-team6/shared/uploads
            mkdir -p ~/fin-invoice-ocr-team6/db_backups
            mkdir -p ~/fin-invoice-ocr-team6/environments/green/current/backend
            mkdir -p ~/fin-invoice-ocr-team6/environments/blue/current/backend
          "

      - name: Create Database Backup
        run: |
          ssh -o StrictHostKeyChecking=no -i ssh-key.pem ${{ secrets.USERNAME }}@${{ secrets.SERVER_IP }} '
            # Load environment variables
            source ~/fin-invoice-ocr-team6/shared/.env || true
            
            # Create DB backup directory
            mkdir -p ~/fin-invoice-ocr-team6/db_backups
            
            echo "Creating MySQL database backup..."
            
            # Create MySQL backup with timestamp
            BACKUP_FILE=~/fin-invoice-ocr-team6/db_backups/backup-$(date +%Y%m%d%H%M%S).sql
            mysqldump -h $DB_HOST -P $DB_PORT -u $DB_USER -p$DB_PASSWORD $DB_NAME > $BACKUP_FILE
            
            if [ $? -eq 0 ]; then
              echo "MySQL backup completed successfully: $BACKUP_FILE"
              ls -lh $BACKUP_FILE
            else
              echo "MySQL backup failed!"
            fi
            
            # Keep only last 5 backups
            find ~/fin-invoice-ocr-team6/db_backups -name "backup-*.sql" -type f | sort -r | tail -n +6 | xargs rm -f 2>/dev/null || true
          '

      - name: Copy Environment File and NewRelic Config to Server
        run: |
          scp -o StrictHostKeyChecking=no -i ssh-key.pem .env ${{ secrets.USERNAME }}@${{ secrets.SERVER_IP }}:~/fin-invoice-ocr-team6/shared/.env
          scp -o StrictHostKeyChecking=no -i ssh-key.pem newrelic.js ${{ secrets.USERNAME }}@${{ secrets.SERVER_IP }}:~/fin-invoice-ocr-team6/shared/newrelic.js

      - name: Copy Rollback Script to Server
        run: |
          # Copy rollback script from the repository to the server
          scp -o StrictHostKeyChecking=no -i ssh-key.pem backend/scripts/bg-rollback.sh ${{ secrets.USERNAME }}@${{ secrets.SERVER_IP }}:~/fin-invoice-ocr-team6/bg-rollback.sh

          # Make it executable
          ssh -o StrictHostKeyChecking=no -i ssh-key.pem ${{ secrets.USERNAME }}@${{ secrets.SERVER_IP }} '
            chmod +x ~/fin-invoice-ocr-team6/bg-rollback.sh
            echo "Blue-Green rollback script uploaded and made executable"
          '

      - name: Create Release Version
        run: |
          ssh -o StrictHostKeyChecking=no -i ssh-key.pem ${{ secrets.USERNAME }}@${{ secrets.SERVER_IP }} '
            # Create new release directory
            mkdir -p ~/fin-invoice-ocr-team6/releases/${{ env.VERSION }}
            
            # Clone repo into the new release directory
            cd ~/fin-invoice-ocr-team6/releases/${{ env.VERSION }}
            git clone --depth 1 -b ${{ github.event.inputs.branch }} https://github.com/${{ github.repository }} .
            
            # Install dependencies and build in release directory
            cd backend
            npm ci --production
            
            npm install newrelic --save
            
            # Create symbolic link to shared .env file
            ln -sf ~/fin-invoice-ocr-team6/shared/.env ./.env
            
            # Create symbolic link to shared newrelic.js file
            ln -sf ~/fin-invoice-ocr-team6/shared/newrelic.js ./newrelic.js
            
            # Create symbolic link to shared uploads directory
            ln -sf ~/fin-invoice-ocr-team6/shared/uploads ./uploads
            
            # Run migrations
            npx sequelize-cli db:migrate --env ${{ github.event.inputs.environment }}
            
            # Create release metadata file
            echo "{
              \"version\": \"${{ env.VERSION }}\",
              \"timestamp\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\",
              \"branch\": \"${{ github.event.inputs.branch }}\",
              \"commit\": \"${{ github.sha }}\",
              \"actor\": \"${{ github.actor }}\"
            }" > ../release.json
          '

      - name: Deploy to Green Environment
        run: |
          ssh -o StrictHostKeyChecking=no -i ssh-key.pem ${{ secrets.USERNAME }}@${{ secrets.SERVER_IP }} '
            # Deploy to Green environment (port 3005)
            # Copy from release to green environment
            rm -rf ~/fin-invoice-ocr-team6/environments/green/current/*
            cp -R ~/fin-invoice-ocr-team6/releases/${{ env.VERSION }}/* ~/fin-invoice-ocr-team6/environments/green/current/
            
            # Set up symlinks
            cd ~/fin-invoice-ocr-team6/environments/green/current/backend
            ln -sf ~/fin-invoice-ocr-team6/shared/.env ./.env
            ln -sf ~/fin-invoice-ocr-team6/shared/newrelic.js ./newrelic.js
            ln -sf ~/fin-invoice-ocr-team6/shared/uploads ./uploads
            
            # Stop and start Green environment with New Relic
            pm2 stop invoice-ocr-backend-green || true
            pm2 delete invoice-ocr-backend-green || true
            
            # Start with New Relic integration
            PORT=3005 \
            NEW_RELIC_ENABLED=true \
            NEW_RELIC_APP_NAME=invoice-ocr-backend-green \
            NEW_RELIC_LICENSE_KEY=$(grep NEW_RELIC_LICENSE_KEY .env | cut -d"=" -f2) \
            DEPLOYMENT_COLOR=green \
            pm2 start server.js --name invoice-ocr-backend-green --node-args="-r newrelic"
            
            echo "Deployed to Green environment (port 3005) with New Relic monitoring"
            pm2 list | grep invoice
          '

      - name: Verify Green Deployment
        id: verify-green
        run: |
          # Wait for application to start
          sleep 5
          
          # Check Green health endpoint
          ssh -o StrictHostKeyChecking=no -i ssh-key.pem ${{ secrets.USERNAME }}@${{ secrets.SERVER_IP }} '
            echo "Testing Green environment health endpoint..."
            GREEN_HEALTH=$(curl -s http://localhost:3005/health)
            echo "Green health check response: $GREEN_HEALTH"
            GREEN_STATUS=$(echo $GREEN_HEALTH | grep -o "\"status\":\"ok\"" || echo "failed")
            
            # Check New Relic connection
            echo "Checking New Relic connection..."
            pm2 logs invoice-ocr-backend-green --lines 20 --nostream | grep "New Relic" || echo "No New Relic logs found yet"
            
            if [ "$GREEN_STATUS" = "\"status\":\"ok\"" ]; then
              echo "✅ Green environment health check passed!"
              exit 0
            else
              echo "❌ Green environment health check failed!"
              exit 1
            fi
          '

      - name: Deploy to Blue Environment
        run: |
          ssh -o StrictHostKeyChecking=no -i ssh-key.pem ${{ secrets.USERNAME }}@${{ secrets.SERVER_IP }} '
            # Get latest version ID from green environment
            VERSION_ID=$(cat ~/fin-invoice-ocr-team6/environments/green/current/release.json | grep -o "\"version\":[^,]*" | cut -d":" -f2 | tr -d "\"" | tr -d " ")
            
            echo "Deploying version $VERSION_ID to Blue environment (port 3000) with New Relic"
            
            # Deploy to Blue environment (port 3000)
            # Copy from release to blue environment
            rm -rf ~/fin-invoice-ocr-team6/environments/blue/current/*
            cp -R ~/fin-invoice-ocr-team6/releases/$VERSION_ID/* ~/fin-invoice-ocr-team6/environments/blue/current/
            
            # Set up symlinks
            cd ~/fin-invoice-ocr-team6/environments/blue/current/backend
            ln -sf ~/fin-invoice-ocr-team6/shared/.env ./.env
            ln -sf ~/fin-invoice-ocr-team6/shared/newrelic.js ./newrelic.js
            ln -sf ~/fin-invoice-ocr-team6/shared/uploads ./uploads
            
            # Update current symlink to point to the new release
            ln -sfn ~/fin-invoice-ocr-team6/releases/$VERSION_ID ~/fin-invoice-ocr-team6/current
            
            # Stop and start Blue environment with New Relic
            pm2 stop invoice-ocr-backend-blue || true
            pm2 delete invoice-ocr-backend-blue || true
            
            # Start with New Relic integration
            PORT=3000 \
            NEW_RELIC_ENABLED=true \
            NEW_RELIC_APP_NAME=invoice-ocr-backend-blue \
            NEW_RELIC_LICENSE_KEY=$(grep NEW_RELIC_LICENSE_KEY .env | cut -d"=" -f2) \
            DEPLOYMENT_COLOR=blue \
            pm2 start server.js --name invoice-ocr-backend-blue --node-args="-r newrelic"
            
            # Also start the default app with New Relic (for backwards compatibility)
            pm2 stop invoice-ocr-backend || true
            pm2 delete invoice-ocr-backend || true
            
            PORT=3000 \
            NEW_RELIC_ENABLED=true \
            NEW_RELIC_APP_NAME=invoice-ocr-backend \
            NEW_RELIC_LICENSE_KEY=$(grep NEW_RELIC_LICENSE_KEY .env | cut -d"=" -f2) \
            DEPLOYMENT_COLOR=blue \
            pm2 start server.js --name invoice-ocr-backend --node-args="-r newrelic"
            
            pm2 save
            
            echo "Deployed to Blue environment (port 3000) with New Relic monitoring"
            pm2 list | grep invoice
            
            # Cleanup old releases (keep only the last 5)
            cd ~/fin-invoice-ocr-team6/releases
            ls -td */ | tail -n +6 | xargs rm -rf 2>/dev/null || true
          '

      - name: Verify Blue Deployment
        run: |
          # Wait for application to start
          sleep 5
          
          # Check Blue health endpoint
          ssh -o StrictHostKeyChecking=no -i ssh-key.pem ${{ secrets.USERNAME }}@${{ secrets.SERVER_IP }} '
            echo "Testing Blue environment health endpoint..."
            BLUE_HEALTH=$(curl -s http://localhost:3000/health)
            echo "Blue health check response: $BLUE_HEALTH"
            BLUE_STATUS=$(echo $BLUE_HEALTH | grep -o "\"status\":\"ok\"" || echo "failed")
            
            # Check New Relic connection
            echo "Checking New Relic connection..."
            pm2 logs invoice-ocr-backend-blue --lines 20 --nostream | grep "New Relic" || echo "No New Relic logs found yet"
            
            if [ "$BLUE_STATUS" = "\"status\":\"ok\"" ]; then
              echo "✅ Blue environment health check passed!"
              echo "✅ Deployment completed successfully to both Green and Blue environments with New Relic monitoring."
            else
              echo "❌ Blue environment health check failed!"
              echo "⚠️ Warning: Green environment is working but Blue failed. Traffic is still going to Blue."
              exit 1
            fi
          '

      - name: Notify New Relic of Deployment
        if: success()
        run: |
          curl -X POST "https://api.newrelic.com/v2/applications/deployment.json" \
            -H "X-Api-Key: ${{ secrets.NEW_RELIC_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "deployment": {
                "revision": "${{ env.VERSION }}",
                "changelog": "Manual Deployment via GitHub Actions",
                "description": "Blue/Green Deployment",
                "user": "${{ github.actor }}"
              }
            }'

  rollback:
    name: Rollback Application (Blue-Green)
>>>>>>> 184afa7 (fix manual deploy workflow)
    runs-on: ubuntu-latest
    steps:
      - name: Install SSH Client & Setup Key
        run: |
<<<<<<< HEAD
          sudo apt-get update
          sudo apt-get install -y openssh-client
          echo "${{ secrets.SSH_KEY }}" > ssh-key.pem
          chmod 400 ssh-key.pem
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
=======
          ssh -o StrictHostKeyChecking=no -i ssh-key.pem ${{ secrets.USERNAME }}@${{ secrets.SERVER_IP }} '
            echo "Available releases:"
            ls -la ~/fin-invoice-ocr-team6/releases/ | grep -E "^d" | awk "{print \$9}" | grep -v "^\." | sort -r
            echo ""
            echo "Current Blue version:"
            if [ -e ~/fin-invoice-ocr-team6/environments/blue/current ]; then
              if [ -f ~/fin-invoice-ocr-team6/environments/blue/current/release.json ]; then
                cat ~/fin-invoice-ocr-team6/environments/blue/current/release.json
              fi
            else
              echo "No current Blue deployment found"
            fi
            echo ""
            echo "Current Green version:"
            if [ -e ~/fin-invoice-ocr-team6/environments/green/current ]; then
              if [ -f ~/fin-invoice-ocr-team6/environments/green/current/release.json ]; then
                cat ~/fin-invoice-ocr-team6/environments/green/current/release.json
              fi
            else
              echo "No current Green deployment found"
            fi
          '

      - name: Check for Rollback Script 
        run: |
          ssh -o StrictHostKeyChecking=no -i ssh-key.pem ${{ secrets.USERNAME }}@${{ secrets.SERVER_IP }} '
            if [ ! -f ~/fin-invoice-ocr-team6/bg-rollback.sh ]; then
              echo "⚠️ Blue-Green rollback script not found!"
              echo "Looking for a copy in release directories..."
              
              # Look for the script in any release directory
              SCRIPT_PATH=""
              for release in ~/fin-invoice-ocr-team6/releases/*/; do
                if [ -f "${release}backend/scripts/bg-rollback.sh" ]; then
                  SCRIPT_PATH="${release}backend/scripts/bg-rollback.sh"
                  break
                fi
              done
              
              if [ -n "$SCRIPT_PATH" ]; then
                echo "Found rollback script at $SCRIPT_PATH, copying to ~/fin-invoice-ocr-team6/bg-rollback.sh"
                cp "$SCRIPT_PATH" ~/fin-invoice-ocr-team6/bg-rollback.sh
                chmod +x ~/fin-invoice-ocr-team6/bg-rollback.sh
              else
                echo "❌ Rollback script not found in any release directory!"
                echo "Manual rollback might be required."
                exit 1
              fi
            else
              echo "✅ Blue-Green rollback script found at ~/fin-invoice-ocr-team6/bg-rollback.sh"
            fi
          '
>>>>>>> 184afa7 (fix manual deploy workflow)

      - name: Run Rollback Script on Server
        id: run-rollback
        run: |
<<<<<<< HEAD
          VERSION_FLAG=""
          if [[ "${{ github.event.inputs.rollback_version }}" != "" ]]; then
            VERSION_FLAG="--version ${{ github.event.inputs.rollback_version }}"
=======
          ssh -o StrictHostKeyChecking=no -i ssh-key.pem ${{ secrets.USERNAME }}@${{ secrets.SERVER_IP }} '
            if [ -n "${{ github.event.inputs.rollback_version }}" ]; then
              # Use specified version
              echo "Executing rollback to version ${{ github.event.inputs.rollback_version }}..."
              ~/fin-invoice-ocr-team6/bg-rollback.sh --version ${{ github.event.inputs.rollback_version }}
            else
              # Use automatic rollback to previous version
              echo "Executing automatic rollback to previous version..."
              ~/fin-invoice-ocr-team6/bg-rollback.sh
            fi
          '

      - name: Verify Rollback
        run: |
          # Wait for the application to fully start
          sleep 5

          # Check health endpoints for both environments
          ssh -o StrictHostKeyChecking=no -i ssh-key.pem ${{ secrets.USERNAME }}@${{ secrets.SERVER_IP }} '
            echo "Testing Blue environment health endpoint..."
            BLUE_HEALTH=$(curl -s http://localhost:3000/health)
            echo "Blue health check response: $BLUE_HEALTH"
            BLUE_STATUS=$(echo $BLUE_HEALTH | grep -o "\"status\":\"ok\"" || echo "failed")
            
            echo "Testing Green environment health endpoint..."
            GREEN_HEALTH=$(curl -s http://localhost:3005/health)
            echo "Green health check response: $GREEN_HEALTH"
            GREEN_STATUS=$(echo $GREEN_HEALTH | grep -o "\"status\":\"ok\"" || echo "failed")
            
            if [ "$BLUE_STATUS" = "\"status\":\"ok\"" ]; then
              echo "✅ Blue environment rollback successful!"
              if [ -f ~/fin-invoice-ocr-team6/environments/blue/current/release.json ]; then
                echo "Current Blue release info:"
                cat ~/fin-invoice-ocr-team6/environments/blue/current/release.json
              fi
            else
              echo "❌ Blue environment health check failed after rollback!"
            fi
            
            if [ "$GREEN_STATUS" = "\"status\":\"ok\"" ]; then
              echo "✅ Green environment rollback successful!"
              if [ -f ~/fin-invoice-ocr-team6/environments/green/current/release.json ]; then
                echo "Current Green release info:"
                cat ~/fin-invoice-ocr-team6/environments/green/current/release.json
              fi
            else
              echo "❌ Green environment health check failed after rollback!"
            fi
            
            if [ "$BLUE_STATUS" != "\"status\":\"ok\"" ] && [ "$GREEN_STATUS" != "\"status\":\"ok\"" ]; then
              echo "❌ Both environments failed health checks after rollback!"
              exit 1
            fi
          '

      - name: Notify New Relic of Rollback
        if: success()
        run: |
          ssh -o StrictHostKeyChecking=no -i ssh-key.pem ${{ secrets.USERNAME }}@${{ secrets.SERVER_IP }} '
            # Get rollback version from current release
            if [ -f ~/fin-invoice-ocr-team6/environments/blue/current/release.json ]; then
              ROLLBACK_VERSION=$(cat ~/fin-invoice-ocr-team6/environments/blue/current/release.json | grep -o "\"version\":[^,]*" | cut -d":" -f2 | tr -d "\"" | tr -d " ")
              
              if [ -n "$ROLLBACK_VERSION" ]; then
                echo "Notifying New Relic about rollback to version $ROLLBACK_VERSION"
                
                NEW_RELIC_API_KEY=$(grep NEW_RELIC_API_KEY ~/fin-invoice-ocr-team6/shared/.env | cut -d"=" -f2 || echo "")
                
                if [ -n "$NEW_RELIC_API_KEY" ]; then
                  curl -X POST "https://api.newrelic.com/v2/applications/deployment.json" \
                    -H "X-Api-Key: $NEW_RELIC_API_KEY" \
                    -H "Content-Type: application/json" \
                    -d "{
                      \"deployment\": {
                        \"revision\": \"$ROLLBACK_VERSION\",
                        \"changelog\": \"Manual rollback via GitHub Actions\",
                        \"description\": \"Blue/Green Rollback\",
                        \"user\": \"${{ github.actor }}\"
                      }
                    }"
                else
                  echo "New Relic API key not found in environment variables"
                fi
              else
                echo "Could not determine rollback version from release.json"
              fi
            else
              echo "No release.json found in current Blue environment"
            fi
          '

  post-action:
    name: Post Action Notification
    runs-on: ubuntu-latest
    needs: [deploy, rollback]
    if: always() && (needs.deploy.result == 'success' || needs.rollback.result == 'success')
    steps:
      - name: Send Notification
        run: |
          ACTION="${{ github.event.inputs.action }}"
          ENVIRONMENT="${{ github.event.inputs.environment }}"

          if [ "$ACTION" = "deploy" ]; then
            BRANCH="${{ github.event.inputs.branch }}"
            MESSAGE="✅ Manual Blue-Green deployment completed successfully
            - Environment: $ENVIRONMENT
            - Branch: $BRANCH
            - Actor: ${{ github.actor }}
            - Time: $(date -u)"
          else
            VERSION="${{ github.event.inputs.rollback_version }}"
            MESSAGE="🔄 Manual Blue-Green rollback completed successfully
            - Environment: $ENVIRONMENT
            - Version: ${VERSION:-'Previous version (automatic)'}
            - Actor: ${{ github.actor }}
            - Time: $(date -u)"
>>>>>>> 184afa7 (fix manual deploy workflow)
          fi

          ssh -o StrictHostKeyChecking=no -i ssh-key.pem ${{ secrets.USERNAME }}@${{ secrets.SERVER_IP }} "\
            bash ~/fin-invoice-ocr-team6/scripts/bg-rollback.sh $VERSION_FLAG \
          "

<<<<<<< HEAD
      - name: Notify Discord (Rollback Success)
        if: success()
        run: |
          VERSION="${{ github.event.inputs.rollback_version || 'previous release' }}"
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{\"content\": \"✅ *Rollback berhasil* ke versi \`${VERSION}\` oleh \`${{ github.actor }}\`\"}" \
               ${{ secrets.DISCORD_WEBHOOK }}

      - name: Notify Discord (Rollback Failed)
        if: failure()
        run: |
          VERSION="${{ github.event.inputs.rollback_version || 'previous release' }}"
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{\"content\": \"❌ *Rollback gagal!* Versi: \`${VERSION}\` oleh \`${{ github.actor }}\`\"}" \
               ${{ secrets.DISCORD_WEBHOOK }}
=======
          # You can add Slack, Teams, or Discord notifications here
          # Example for Slack webhook:
          # curl -X POST -H 'Content-type: application/json' --data '{"text":"'"$MESSAGE"'"}' ${{ secrets.SLACK_WEBHOOK_URL }}
>>>>>>> 184afa7 (fix manual deploy workflow)
