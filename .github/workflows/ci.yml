name: Node.js CI/CD Pipeline with Blue-Green Deployment

on:
  push:
    branches:
      - "**"
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build Node.js App
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: backend/package-lock.json

      - name: Install Dependencies
        working-directory: backend
        run: npm install

      - name: Set up environment variables
        run: |
          echo "AZURE_ENDPOINT=${{ secrets.AZURE_ENDPOINT }}" >> $GITHUB_ENV
          echo "AZURE_KEY=${{ secrets.AZURE_KEY }}" >> $GITHUB_ENV
          echo "AZURE_INVOICE_MODEL=${{ secrets.AZURE_INVOICE_MODEL }}" >> $GITHUB_ENV
          echo "AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }}" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV

      - name: Build Application
        working-directory: backend
        run: npm run build
        env:
          NODE_ENV: ${{ secrets.NODE_ENV }}

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: backend/dist/

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: backend/package-lock.json

      - name: Install Dependencies
        working-directory: backend
        run: npm install

      - name: Set up environment variables
        run: |
          echo "AZURE_ENDPOINT=${{ secrets.AZURE_ENDPOINT }}" >> $GITHUB_ENV
          echo "AZURE_KEY=${{ secrets.AZURE_KEY }}" >> $GITHUB_ENV
          echo "AZURE_INVOICE_MODEL=${{ secrets.AZURE_INVOICE_MODEL }}" >> $GITHUB_ENV
          echo "AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }}" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV

      - name: Run Linter
        working-directory: backend
        run: npm run lint

      - name: Run Tests with Coverage
        working-directory: backend
        run: npm test -- --coverage 
        env:
          NODE_ENV: ${{ secrets.NODE_ENV }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          AZURE_ENDPOINT: ${{ secrets.AZURE_ENDPOINT }}
          AZURE_KEY: ${{ secrets.AZURE_KEY }}
          AZURE_INVOICE_MODEL: ${{ secrets.AZURE_INVOICE_MODEL }}
          AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./backend/coverage
          fail_ci_if_error: true  
          verbose: true  

      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
      
      - name: Display Codecov link
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          REPO_NAME="${{ github.repository }}"
          echo "Code Coverage Report: https://codecov.io/gh/${REPO_NAME}/branch/${BRANCH_NAME}"

  deploy-green:
    name: Deploy to Green Environment
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/deployment-2' || github.ref == 'refs/heads/deployment'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: backend/package-lock.json

      - name: Install Dependencies
        working-directory: backend
        run: npm install

      - name: Build Application
        working-directory: backend
        run: npm run build
        env:
          NODE_ENV: staging

      - name: Generate Version ID
        run: |
          VERSION=$(date +'%Y%m%d%H%M%S')-${GITHUB_SHA::8}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "🏷️ Generated Version ID: $VERSION"
          echo "📝 Details:"
          echo "   - Branch: ${{ github.ref_name }}"
          echo "   - Commit: ${GITHUB_SHA::8}"
          echo "   - Timestamp: $(date +'%Y%m%d%H%M%S')"

      - name: Install SSH client
        run: sudo apt-get install openssh-client

      - name: Create SSH Key
        run: echo "${{ secrets.SSH_KEY }}" > ssh-key.pem

      - name: Update SSH Key Permission
        run: chmod 400 ssh-key.pem

      - name: Set up Staging Environment Variables
        run: |
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "NODE_ENV=staging" >> .env
          echo "CLIENT_ID=${{ secrets.CLIENT_ID }}" >> .env
          echo "CLIENT_SECRET=${{ secrets.CLIENT_SECRET }}" >> .env
          echo "AZURE_ENDPOINT=${{ secrets.AZURE_ENDPOINT }}" >> .env
          echo "AZURE_KEY=${{ secrets.AZURE_KEY }}" >> .env
          echo "AZURE_INVOICE_MODEL=${{ secrets.AZURE_INVOICE_MODEL }}" >> .env
          echo "AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }}" >> .env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env
          echo "DSN=${{ secrets.DSN }}" >> .env

      - name: Setup Directory Structure
        run: |
          ssh -o StrictHostKeyChecking=no -i ssh-key.pem ${{ secrets.USERNAME }}@${{ secrets.SERVER_IP }} "
            # Create necessary directories if they don't exist
            mkdir -p ~/fin-invoice-ocr-team6/releases
            mkdir -p ~/fin-invoice-ocr-team6/backups
            mkdir -p ~/fin-invoice-ocr-team6/shared
            mkdir -p ~/fin-invoice-ocr-team6/shared/uploads
            mkdir -p ~/fin-invoice-ocr-team6/db_backups
            mkdir -p ~/fin-invoice-ocr-team6/environments/green/current/backend
            mkdir -p ~/fin-invoice-ocr-team6/environments/blue/current/backend
          "
      
      - name: Create Database Backup
        run: |
          ssh -o StrictHostKeyChecking=no -i ssh-key.pem ${{ secrets.USERNAME }}@${{ secrets.SERVER_IP }} '
            # Load environment variables
            source ~/fin-invoice-ocr-team6/shared/.env
            
            # Create DB backup directory
            mkdir -p ~/fin-invoice-ocr-team6/db_backups
            
            echo "Creating MySQL database backup..."
            
            # Create MySQL backup with timestamp
            BACKUP_FILE=~/fin-invoice-ocr-team6/db_backups/backup-$(date +%Y%m%d%H%M%S).sql
            mysqldump -h $DB_HOST -P $DB_PORT -u $DB_USER -p$DB_PASSWORD $DB_NAME > $BACKUP_FILE
            
            if [ $? -eq 0 ]; then
              echo "MySQL backup completed successfully: $BACKUP_FILE"
              ls -lh $BACKUP_FILE
            else
              echo "MySQL backup failed!"
            fi
            
            # Keep only last 5 backups
            find ~/fin-invoice-ocr-team6/db_backups -name "backup-*.sql" -type f | sort -r | tail -n +6 | xargs rm -f 2>/dev/null || true
          '

      - name: Copy Environment File to Server
        run: |
          scp -o StrictHostKeyChecking=no -i ssh-key.pem .env ${{ secrets.USERNAME }}@${{ secrets.SERVER_IP }}:~/fin-invoice-ocr-team6/shared/.env

      - name: Create Release Version
        run: |
          ssh -o StrictHostKeyChecking=no -i ssh-key.pem ${{ secrets.USERNAME }}@${{ secrets.SERVER_IP }} '
            # Create new release directory
            mkdir -p ~/fin-invoice-ocr-team6/releases/${{ env.VERSION }}
            
            # Clone repo into the new release directory
            cd ~/fin-invoice-ocr-team6/releases/${{ env.VERSION }}
            git clone --depth 1 -b ${{ github.ref_name }} https://github.com/${{ github.repository }} .
            
            # Install dependencies and build in release directory
            cd backend
            npm ci --production
            
            # Create symbolic link to shared .env file
            ln -sf ~/fin-invoice-ocr-team6/shared/.env ./.env
            
            # Create symbolic link to shared uploads directory
            ln -sf ~/fin-invoice-ocr-team6/shared/uploads ./uploads
            
            # Run migrations
            npx sequelize-cli db:migrate --env staging
            
            # Create release metadata file
            echo "{
              \"version\": \"${{ env.VERSION }}\",
              \"timestamp\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\",
              \"branch\": \"${{ github.ref_name }}\",
              \"commit\": \"${{ github.sha }}\",
              \"actor\": \"${{ github.actor }}\"
            }" > ../release.json
          '

      - name: Deploy to Green Environment
        run: |
          ssh -o StrictHostKeyChecking=no -i ssh-key.pem ${{ secrets.USERNAME }}@${{ secrets.SERVER_IP }} '
            # Deploy to Green environment (port 3005)
            # Copy from release to green environment
            rm -rf ~/fin-invoice-ocr-team6/environments/green/current/*
            cp -R ~/fin-invoice-ocr-team6/releases/${{ env.VERSION }}/* ~/fin-invoice-ocr-team6/environments/green/current/
            
            # Set up symlinks
            cd ~/fin-invoice-ocr-team6/environments/green/current/backend
            ln -sf ~/fin-invoice-ocr-team6/shared/.env ./.env
            ln -sf ~/fin-invoice-ocr-team6/shared/uploads ./uploads
            
            # Stop and start Green environment
            pm2 stop invoice-ocr-backend-green || true
            pm2 delete invoice-ocr-backend-green || true
            PORT=3005 pm2 start server.js --name invoice-ocr-backend-green
            
            echo "Deployed to Green environment (port 3005)"
            pm2 list | grep invoice
          '

      - name: Verify Green Deployment
        id: verify-green
        run: |
          # Wait for application to start
          sleep 5
          
          # Check Green health endpoint
          ssh -o StrictHostKeyChecking=no -i ssh-key.pem ${{ secrets.USERNAME }}@${{ secrets.SERVER_IP }} '
            echo "Testing Green environment health endpoint..."
            GREEN_HEALTH=$(curl -s http://localhost:3005/health)
            echo "Green health check response: $GREEN_HEALTH"
            GREEN_STATUS=$(echo $GREEN_HEALTH | grep -o "\"status\":\"ok\"" || echo "failed")
            
            if [ "$GREEN_STATUS" = "\"status\":\"ok\"" ]; then
              echo "✅ Green environment health check passed!"
              exit 0
            else
              echo "❌ Green environment health check failed!"
              exit 1
            fi
          '

  deploy-blue:
    name: Deploy to Production (Blue)
    runs-on: ubuntu-latest
    needs: deploy-green
    if: github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/deployment-2' || github.ref == 'refs/heads/deployment'
    steps:
      - name: Install SSH client
        run: sudo apt-get install openssh-client

      - name: Create SSH Key
        run: echo "${{ secrets.SSH_KEY }}" > ssh-key.pem

      - name: Update SSH Key Permission
        run: chmod 400 ssh-key.pem

      - name: Deploy to Blue Environment
        run: |
          ssh -o StrictHostKeyChecking=no -i ssh-key.pem ${{ secrets.USERNAME }}@${{ secrets.SERVER_IP }} '
            # Get latest version ID from green environment
            VERSION_ID=$(cat ~/fin-invoice-ocr-team6/environments/green/current/release.json | grep -o "\"version\":[^,]*" | cut -d":" -f2 | tr -d "\"" | tr -d " ")
            
            echo "Deploying version $VERSION_ID to Blue environment (port 3000)"
            
            # Deploy to Blue environment (port 3000)
            # Copy from release to blue environment
            rm -rf ~/fin-invoice-ocr-team6/environments/blue/current/*
            cp -R ~/fin-invoice-ocr-team6/releases/$VERSION_ID/* ~/fin-invoice-ocr-team6/environments/blue/current/
            
            # Set up symlinks
            cd ~/fin-invoice-ocr-team6/environments/blue/current/backend
            ln -sf ~/fin-invoice-ocr-team6/shared/.env ./.env
            ln -sf ~/fin-invoice-ocr-team6/shared/uploads ./uploads
            
            # Update current symlink to point to the new release
            ln -sfn ~/fin-invoice-ocr-team6/releases/$VERSION_ID ~/fin-invoice-ocr-team6/current
            
            # Stop and start Blue environment
            pm2 stop invoice-ocr-backend-blue || true
            pm2 delete invoice-ocr-backend-blue || true
            PORT=3000 pm2 start server.js --name invoice-ocr-backend-blue
            
            # Also start the default app (for backwards compatibility)
            pm2 stop invoice-ocr-backend || true
            pm2 delete invoice-ocr-backend || true
            PORT=3000 pm2 start server.js --name invoice-ocr-backend
            
            pm2 save
            
            echo "Deployed to Blue environment (port 3000)"
            pm2 list | grep invoice
            
            # Cleanup old releases (keep only the last 5)
            cd ~/fin-invoice-ocr-team6/releases
            ls -td */ | tail -n +6 | xargs rm -rf 2>/dev/null || true
          '

      - name: Verify Blue Deployment
        run: |
          # Wait for application to start
          sleep 5
          
          # Check Blue health endpoint
          ssh -o StrictHostKeyChecking=no -i ssh-key.pem ${{ secrets.USERNAME }}@${{ secrets.SERVER_IP }} '
            echo "Testing Blue environment health endpoint..."
            BLUE_HEALTH=$(curl -s http://localhost:3000/health)
            echo "Blue health check response: $BLUE_HEALTH"
            BLUE_STATUS=$(echo $BLUE_HEALTH | grep -o "\"status\":\"ok\"" || echo "failed")
            
            if [ "$BLUE_STATUS" = "\"status\":\"ok\"" ]; then
              echo "✅ Blue environment health check passed!"
              echo "✅ Deployment completed successfully to both Green and Blue environments."
            else
              echo "❌ Blue environment health check failed!"
              echo "⚠️ Warning: Green environment is working but Blue failed. Traffic is still going to Blue."
              exit 1
            fi
          '
          
  functional-test:
    name: Run Functional Tests
    runs-on: ubuntu-latest
    needs: deploy-blue
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Install Newman and htmlextra
        run: |
          npm install -g newman
          npm install -g newman-reporter-htmlextra

      - name: Check for test files
        run: |
          ls -la functional_test_files/
          if [ ! -f functional_test_files/functional-test.json ]; then
            echo "Error: functional-test.json not found in functional_test_files directory"
            exit 1
          fi

      - name: Create staging-environment.json from secret
        run: echo '${{ secrets.STAGING_ENVIRONMENT_JSON }}' > functional_test_files/staging-environment.json

      - name: Verify environment file
        run: |
          if [ ! -f functional_test_files/staging-environment.json ]; then
            echo "Error: staging-environment.json not created properly"
            exit 1
          fi
          echo "Environment file created successfully"
          
      - name: Create reports directory
        working-directory: functional_test_files
        run: mkdir -p reports

      - name: Run Functional Tests with htmlextra
        working-directory: functional_test_files
        run: |
          echo "Starting Newman tests..."
          newman run functional-test.json -e staging-environment.json -r htmlextra --reporter-htmlextra-skipSensitiveData --reporter-htmlextra-export ./reports/functional-test-report.html || {
            echo "Newman tests failed with exit code $?"
            if [ -f ./reports/functional-test-report.html ]; then
              echo "Test report was generated despite failure"
            else
              echo "No test report was generated"
            fi
            exit 1
          }
          echo "Newman tests completed successfully"

      - name: Upload Functional Test Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: functional-test-report
          path: functional_test_files/reports/functional-test-report.html