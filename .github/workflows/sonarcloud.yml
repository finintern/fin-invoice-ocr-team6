name: Check Local Coverage & Run SonarQube

on:
  push:
    branches:
      - "**"
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build_and_analyze:
    name: Build, Test (100% Coverage Guard), Analyze
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Cache npm modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        working-directory: backend
        run: npm ci

      - name: Install required tools (jq, bc)
        run: |
          sudo apt-get update
          sudo apt-get install -y jq bc

      - name: Run tests with coverage
        working-directory: backend
        run: npm test -- --coverage --watchAll=false --coverageReporters=json-summary --coverageReporters=lcov --coverageReporters=text
        env:
          NODE_ENV: ${{ secrets.NODE_ENV }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          AZURE_ENDPOINT: ${{ secrets.AZURE_ENDPOINT }}
          AZURE_KEY: ${{ secrets.AZURE_KEY }}
          AZURE_INVOICE_MODEL: ${{ secrets.AZURE_INVOICE_MODEL }}
          AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Verify 100% Local Code Coverage
        id: verify_coverage
        working-directory: backend
        run: |
          echo "Verifying local test coverage meets 100% requirement..."
          COVERAGE_FILE="coverage/coverage-summary.json"

          if [ ! -f "$COVERAGE_FILE" ]; then
            echo "::error::Coverage summary file '$COVERAGE_FILE' not found! Ensure tests ran and produced the summary."
            exit 1
          fi

          COVERAGE_PCT=$(jq '.total.lines.pct' $COVERAGE_FILE || echo "0")

          if ! [[ "$COVERAGE_PCT" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
             echo "::error::Could not parse coverage percentage from $COVERAGE_FILE. Value found: '$COVERAGE_PCT'"
             exit 1
          fi

          echo "Current local line coverage: $COVERAGE_PCT%"

          IS_LESS_THAN_100=$(echo "$COVERAGE_PCT < 100" | bc -l)

          if [ "$IS_LESS_THAN_100" -eq 1 ]; then
            echo "::error::Local code coverage is $COVERAGE_PCT%, which is less than the required 100%."
            exit 1
          else
            echo "Local code coverage requirement (100%) met. Proceeding..."
          fi

      - name: Run build script
        working-directory: backend
        run: npm run build

      - name: Cache SonarQube packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: |
            ${{ runner.os }}-sonar

      - name: Run SonarQube analysis
        working-directory: backend
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarqube.cs.ui.ac.id
        run: npx sonar-scanner