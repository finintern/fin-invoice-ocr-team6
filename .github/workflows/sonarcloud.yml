name: SonarQube

on:
  push:
    branches:
      - "**"
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        working-directory: backend
        run: npm install

      - name: Run tests with coverage
        working-directory: backend
        run: npm test -- --coverage --watchAll=false
        env:
          NODE_ENV: ${{ secrets.NODE_ENV }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          AZURE_ENDPOINT: ${{ secrets.AZURE_ENDPOINT }}
          AZURE_KEY: ${{ secrets.AZURE_KEY }}
          AZURE_INVOICE_MODEL: ${{ secrets.AZURE_INVOICE_MODEL }}
          AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Run build script
        working-directory: backend
        run: npm run build

      - name: Cache SonarQube packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Run SonarQube analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: npx sonar-scanner
        working-directory: ./backend

      - name: Download jq (kalau belum ada)
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Check SonarQube metrics manually
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          PROJECT_KEY="fin-invoice-ocr-team6"
          COMPONENT_KEY="$PROJECT_KEY:backend"
          BASE_URL="https://sonarcloud.io"  # ganti kalau pakai self-hosted

          echo "üîç Checking coverage, duplication, and security..."

          RESPONSE=$(curl -s -u $SONAR_TOKEN: "$BASE_URL/api/measures/component?component=$COMPONENT_KEY&metricKeys=coverage,duplicated_lines_density,security_hotspots")

          COVERAGE=$(echo "$RESPONSE" | jq -r '.component.measures[] | select(.metric=="coverage") | .value')
          DUPLICATION=$(echo "$RESPONSE" | jq -r '.component.measures[] | select(.metric=="duplicated_lines_density") | .value')
          SECURITY=$(echo "$RESPONSE" | jq -r '.component.measures[] | select(.metric=="security_hotspots") | .value')

          echo "üìä Coverage         = $COVERAGE%"
          echo "üìä Duplication      = $DUPLICATION%"
          echo "üìä Security Hotspot = $SECURITY"

          if [ "$(echo "$COVERAGE < 100" | bc)" -eq 1 ]; then
            echo "Coverage less than 100%"
            exit 1
          fi

          if [ "$(echo "$DUPLICATION > 0" | bc)" -eq 1 ]; then
            echo "Code duplication more than 0%"
            exit 1
          fi

          if [ "$SECURITY" != "0" ]; then
            echo "Security hotspot detected"
            exit 1
          fi

          echo "All custom quality checks passed!"
