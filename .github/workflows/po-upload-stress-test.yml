name: PO Upload Stress Test

on:
  workflow_dispatch:
    # Workflow yang dapat dijalankan secara manual dari GitHub UI

jobs:
  stress-test-po-upload:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install k6
        run: |
          echo "Installing required dependencies..."
          sudo apt-get update
          sudo apt-get install -y gnupg2 dirmngr

          echo "Adding k6 repository and installing k6..."
          curl -s https://dl.k6.io/key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/k6-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install -y k6
          echo "k6 installation completed."

      - name: Prepare Test Directory
        run: |
          mkdir -p backend/tests/stress
          ls -la sample_file/purchase_order/ || echo "Purchase order sample directory not found"

      - name: Copy Sample Files
        run: |
          echo "Attempting to copy sample PO files..."
          cp -f sample_file/purchase_order/Sample1_Bike_PO.pdf backend/tests/stress/ && echo "Sample PO file copied successfully" || echo "Failed to copy PO sample file, checking if file exists..."
          
          # Verify the file was copied or exists at the destination
          if [ -f backend/tests/stress/Sample1_Bike_PO.pdf ]; then
            echo "✓ Sample1_Bike_PO.pdf exists in test directory"
            ls -la backend/tests/stress/
          else
            echo "⚠️ Sample file not found or not copied. Finding available sample files:"
            find sample_file -name "*.pdf" | grep -i "bike\|po\|purchase"
            
            # Try alternative path if standard path fails
            find sample_file -name "*.pdf" -exec cp -v {} backend/tests/stress/ \; | head -n 1
          fi

      - name: Create Placeholder Stress Test File
        run: |
          cat > backend/tests/stress/upload-po-stress-test.mjs << 'EOF'
          /* global __ENV */
          import { check, sleep } from 'k6';
          import http from 'k6/http';
          import { Counter, Rate, Trend } from 'k6/metrics';
          import { SharedArray } from 'k6/data';

          // Metrik untuk melacak performa
          const errorRate = new Rate('error_rate');
          const latencyP95 = new Trend('latency_p95');
          const requests = new Counter('requests');

          // Konfigurasi stress test
          export const options = {
            stages: [
              { duration: '30s', target: 5 },  // Warm-up dengan beban rendah
              { duration: '1m', target: 10 },  // Peningkatan beban sedang
              { duration: '30s', target: 0 },  // Penurunan ke 0 untuk cool-down
            ],
            thresholds: {
              error_rate: ['rate<0.6'],     // gagal jika error rate > 60%
              latency_p95: ['p(95)<3000'],  // gagal jika 95% request > 3000ms
            },
          };

          // Gunakan SharedArray untuk load file PDF sekali
          const pdfFile = new SharedArray('PO PDF', function() {
            let data;
            try {
              data = open('./Sample1_Bike_PO.pdf', 'b');
              console.log('File PDF berhasil dibuka');
            } catch (e) {
              console.error('Gagal membuka file PDF:', e);
              // Data dummy untuk mencegah crash
              data = new Uint8Array(10).buffer;
            }
            return [data];
          });

          // Fungsi utama test
          export default function() {
            const baseUrl = __ENV.API_BASE_URL || 'http://localhost:3000';
            const uploadUrl = `${baseUrl}/api/purchase-orders/upload`;

            const payload = {
              file: http.file(pdfFile[0], 'Sample1_Bike_PO.pdf', 'application/pdf'),
            };

            const headers = {
              'client_id': __ENV.LOAD_CLIENT_ID || 'placeholder-client-id',
              'client_secret': __ENV.LOAD_CLIENT_SECRET || 'placeholder-client-secret',
            };

            // Eksekusi request
            const startTime = Date.now();
            const res = http.post(uploadUrl, payload, { headers });
            const endTime = Date.now();

            // Validasi dan catat metrik
            const success = check(res, {
              'status is 200': (r) => r.status === 200,
            });

            errorRate.add(!success);
            latencyP95.add(endTime - startTime);
            requests.add(1);

            // Logging
            if (res.status !== 200) {
              console.log(`Request gagal: Status ${res.status}`);
            }

            // Sleep antara request
            sleep(1);
          }

          // Ringkasan hasil test
          export function handleSummary(data) {
            console.log(`\n📊 Error rate: ${(data.metrics.error_rate.rate * 100).toFixed(2)}%`);
            return {};
          }
          EOF
          echo "Placeholder stress test file created."

      - name: Run Placeholder Purchase Order Upload Stress Test
        run: |
          echo "Starting Purchase Order Upload Stress Test..."
          cd backend/tests/stress
          k6 run --no-summary upload-po-stress-test.mjs || echo "Test completed with issues"
          echo "Purchase Order Upload Stress Test completed."

      - name: Display Success Message
        run: |
          echo "# Purchase Order Upload Stress Test" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Setup placeholder stress test workflow completed successfully." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. Configure credentials dan endpoint API untuk test" >> $GITHUB_STEP_SUMMARY
          echo "2. Sesuaikan parameter stages untuk kebutuhan stress test sebenarnya" >> $GITHUB_STEP_SUMMARY
          echo "3. Integrasikan hasil test ke dalam dashboard monitoring" >> $GITHUB_STEP_SUMMARY