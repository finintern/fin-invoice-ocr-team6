name: PO Upload Stress Test

on:
  workflow_dispatch:
    # Workflow can be triggered manually from GitHub UI

jobs:
  stress-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install k6
        run: |
          echo "Installing required dependencies..."
          sudo apt-get update
          sudo apt-get install -y gnupg2 dirmngr

          echo "Adding k6 repository and installing k6..."
          curl -s https://dl.k6.io/key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/k6-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install -y k6
          echo "k6 installation completed."

      - name: Prepare Test Directory
        run: |
          mkdir -p backend/tests/stress
          ls -la sample_file/purchase_order/

      - name: Copy Sample Files
        run: |
          echo "Attempting to copy sample PO files..."
          cp -f sample_file/purchase_order/Sample1_Bike_PO.pdf backend/tests/stress/ && echo "Sample PO file copied successfully" || echo "Failed to copy PO sample file, checking if file exists..."
          
          # Verify the file was copied or exists at the destination
          if [ -f backend/tests/stress/Sample1_Bike_PO.pdf ]; then
            echo "✓ Sample1_Bike_PO.pdf exists in test directory"
            ls -la backend/tests/stress/
          else
            echo "⚠️ Sample file not found or not copied. Finding available sample files:"
            find sample_file -name "*.pdf" | grep -i "bike\|po\|purchase"
            
            # Try alternative path if standard path fails
            if [ -f sample_file/purchase_order/Sample1_Bike_PO.pdf ]; then
              echo "File exists at expected path but copy failed, trying with absolute path"
              cp -f "$(pwd)/sample_file/purchase_order/Sample1_Bike_PO.pdf" backend/tests/stress/
            fi
          fi

      - name: Run Purchase Order Upload Stress Test
        run: |
          echo "Starting Purchase Order Upload Stress Test..."
          cd backend/tests/stress
          ls -la
          k6 run -e LOAD_CLIENT_ID=${{ secrets.LOAD_CLIENT_ID }} -e LOAD_CLIENT_SECRET=${{ secrets.LOAD_CLIENT_SECRET }} -e API_BASE_URL=${{ secrets.API_BASE_URL }} upload-po-stress-test.mjs | tee upload-po-stress-test.log || echo "Purchase Order Upload Stress Test completed with issues!"
          echo "Purchase Order Upload Stress Test completed."

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: po-upload-stress-test-results
          path: backend/tests/stress/upload-po-stress-test.log

      - name: Extract and Process Degradation Analysis
        run: |
          cd backend/tests/stress
          echo "Extracting degradation analysis from test results..."
          
          # Count timeout errors first without modifying the file
          TIMEOUT_COUNT=$(grep -c "Status 504" upload-po-stress-test.log || echo "0")
          echo "Total timeout errors (504): $TIMEOUT_COUNT"
          echo "$TIMEOUT_COUNT" > timeout_count.txt
          
          # Extract sections of the log without sed replacements
          SUMMARY=$(grep -A 20 "=== Purchase Order Upload Stress Test Summary ===" upload-po-stress-test.log || echo "Tidak dapat menemukan ringkasan hasil")
          DEGRADATION_ANALYSIS=$(grep -A 50 "=== Analisis Degradasi Sistem ===" upload-po-stress-test.log || echo "Tidak dapat menemukan analisis degradasi")
          PERFORMANCE_TABLE=$(grep -A 15 "Performa Per Tahap Load Testing:" upload-po-stress-test.log || echo "Tidak dapat menemukan tabel performa")
          CONCLUSION=$(grep -A 10 "=== Ringkasan Ketahanan Sistem ===" upload-po-stress-test.log || echo "Tidak dapat menemukan kesimpulan analisis")
          
          # Save to separate files for easier reference
          echo "$SUMMARY" > summary.txt
          echo "$DEGRADATION_ANALYSIS" > degradation_analysis.txt
          echo "$PERFORMANCE_TABLE" > performance_table.txt
          echo "$CONCLUSION" > conclusion.txt
          
          # Create fallback table directly - bypass the complex sed command
          echo "Creating performance summary directly from timeouts..."
          echo "## Performance Summary" > performance_summary.md
          echo "| Stage | VUs | Requests | Error Rate | Failed Requests (504) | Latency p95 (ms) | Status |" >> performance_summary.md
          echo "| ----- | --- | -------- | ---------- | -------------------- | --------------- | ------ |" >> performance_summary.md
          
          # Define VU targets for each stage
          VU_TARGETS=(10 15 18 20 30 40 60 80 100 300)
          
          # Create simple table directly from log data without complex regex
          for i in {0..9}; do
            # Count successful and failed requests per stage
            STAGE_REQUESTS=$(grep -c "Request berhasil.*Stage: $i" upload-po-stress-test.log || echo "0")
            STAGE_FAILURES=$(grep -c "Request gagal.*Stage: $i" upload-po-stress-test.log || echo "0")
            STAGE_TIMEOUTS=$(grep -c "Status 504.*Stage: $i" upload-po-stress-test.log || echo "0")
            
            # Calculate total requests
            TOTAL_REQUESTS=$((STAGE_REQUESTS + STAGE_FAILURES))
            
            # Calculate error rate
            if [ "$TOTAL_REQUESTS" -gt 0 ]; then
              ERROR_RATE=$(echo "scale=2; $STAGE_FAILURES * 100 / $TOTAL_REQUESTS" | bc 2>/dev/null || echo "0.00")
              ERROR_RATE="${ERROR_RATE}%"
            else
              ERROR_RATE="0.00%"
            fi
            
            # Determine status based on timeouts
            if [ "$STAGE_TIMEOUTS" -gt 0 ]; then
              STATUS="⚠️ Timeouts Detected"
            else
              STATUS="Normal"
            fi
            
            # Get latency from performance table if available
            LATENCY_P95=$(grep -E "^$i \|.*\|.*\|.*\|.*\|.*\|" performance_table.txt | awk -F'|' '{print $6}' | tr -d ' ' || echo "N/A")
            
            # Create line for markdown table
            echo "| $i | ${VU_TARGETS[$i]} | $TOTAL_REQUESTS | $ERROR_RATE | $STAGE_TIMEOUTS | $LATENCY_P95 | $STATUS |" >> performance_summary.md
            
            # Save raw data for debugging
            echo "Stage $i: Requests=$STAGE_REQUESTS, Failures=$STAGE_FAILURES, Timeouts=$STAGE_TIMEOUTS" >> raw_stats.txt
          done

      - name: Generate Summary
        run: |
          echo "# Purchase Order Upload Stress Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Add total timeout count
          if [ -f "backend/tests/stress/timeout_count.txt" ]; then
            TIMEOUT_COUNT=$(cat backend/tests/stress/timeout_count.txt)
            echo "## 🚨 Total Error (504 Timeout) Count: $TIMEOUT_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Add raw stats for debugging
          if [ -f "backend/tests/stress/raw_stats.txt" ]; then
            echo "## Debug Stats" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat backend/tests/stress/raw_stats.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -f "backend/tests/stress/summary.txt" ]; then
            echo "## Ringkasan Hasil Test" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat backend/tests/stress/summary.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
          
          # Include performance summary table
          if [ -f "backend/tests/stress/performance_summary.md" ]; then
            echo "## Performa Per Tahap Load Testing" >> $GITHUB_STEP_SUMMARY
            cat backend/tests/stress/performance_summary.md >> $GITHUB_STEP_SUMMARY
          elif [ -f "backend/tests/stress/performance_table.txt" ]; then
            echo "## Performa Per Tahap Load Testing (Raw)" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat backend/tests/stress/performance_table.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
          
          # Include conclusion
          if [ -f "backend/tests/stress/conclusion.txt" ]; then
            echo "## Analisis Titik Degradasi Sistem" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat backend/tests/stress/conclusion.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            
            # Extract specific information about degradation point and crash point for better visibility
            DEGRADATION_POINT=$(grep -E "Sistem mulai menunjukkan tanda-tanda degradasi" backend/tests/stress/conclusion.txt || echo "Tidak terdeteksi titik degradasi")
            CRASH_POINT=$(grep -E "Sistem mengalami crash/kegagalan signifikan" backend/tests/stress/conclusion.txt || echo "")
            DEGRADATION_PATTERN=$(grep -E "Pola Degradasi:" backend/tests/stress/conclusion.txt || echo "Tidak terdeteksi pola degradasi")
            
            echo "## Ringkasan Ketahanan Sistem" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🔍 **Titik Degradasi:** ${DEGRADATION_POINT#*🔍 }" >> $GITHUB_STEP_SUMMARY
            
            if [ -n "$CRASH_POINT" ]; then
              echo "💥 **Titik Crash:** ${CRASH_POINT#*💥 }" >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ **Tidak terdeteksi crash system selama pengujian**" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "🔄 **${DEGRADATION_PATTERN#*🔄 }**" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ File log tidak ditemukan atau analisis tidak dapat diekstrak" >> $GITHUB_STEP_SUMMARY
          fi