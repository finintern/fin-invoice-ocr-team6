{
	"info": {
		"_postman_id": "0719668a-719f-47ff-93dc-af7a752e6d7f",
		"name": "Functional Test",
		"description": "API Purchase Order & Invoice Reader fineksi dibuat untuk memberikan kemudahan bagi partner dalam menganalisis dan mengelola dokumen PO dan invoice yang mereka miliki.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29699485"
	},
	"item": [
		{
			"name": "Invoice Upload",
			"item": [
				{
					"name": "Upload Invoice Succesful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test for response time\r",
									"pm.test(\"Response time is less than 10000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
									"});\r",
									"\r",
									"// Test for content type\r",
									"pm.test(\"Content-Type is present and is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// Test for message and invoice details\r",
									"pm.test(\"Response contains message and invoice details\", function () {\r",
									"    pm.expect(pm.response.json().message.message).to.equal(\"Invoice upload initiated\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "test-valid.pdf"
								},
								{
									"key": "skipAnalysis",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/invoices/upload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"upload"
							]
						},
						"description": "Upload invoice berupa file PDF."
					},
					"response": []
				},
				{
					"name": "Invalid File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code\r",
									"pm.test(\"Status code is 415\", function () {\r",
									"    pm.response.to.have.status(415);\r",
									"});\r",
									"\r",
									"// Test for response time\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// Test for content type\r",
									"pm.test(\"Content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// Test for message in the response body\r",
									"pm.test(\"Message is 'Invalid MIME type'\", function () {\r",
									"    pm.expect(pm.response.json().message).to.equal(\"Invalid MIME type\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "test-nonpdf.txt"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/invoices/upload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"upload"
							]
						},
						"description": "Upload invoice berupa file PDF."
					},
					"response": []
				},
				{
					"name": "Missing File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test for response time\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// Test for the presence of message in the response body\r",
									"pm.test(\"Response contains message\", function () {\r",
									"    pm.expect(pm.response.json().message).to.exist;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/invoices/upload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Encrypted (No Password)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code\r",
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"// Test for response message\r",
									"pm.test(\"Response message is 'PDF is encrypted and requires a password'\", function () {\r",
									"    pm.expect(pm.response.json().message.message).to.equal(\"PDF is encrypted and requires a password\");\r",
									"});\r",
									"\r",
									"// Test for content type header\r",
									"pm.test(\"Content-Type is present and is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "test_encrypted.pdf"
								},
								{
									"key": "skipAnalysis",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/invoices/upload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"upload"
							]
						},
						"description": "Upload invoice berupa file PDF."
					},
					"response": []
				},
				{
					"name": "Encrypted (Incorrect Password)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test for response message\r",
									"pm.test(\"Response message is 'Incorrect password for encrypted PDF'\", function () {\r",
									"    pm.expect(pm.response.json().message).to.equal(\"Incorrect password for encrypted PDF\");\r",
									"});\r",
									"\r",
									"// Test for content type header\r",
									"pm.test(\"Content-Type is present and is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "test_encrypted.pdf"
								},
								{
									"key": "password",
									"value": "wrong_password",
									"type": "text"
								},
								{
									"key": "skipAnalysis",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/invoices/upload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"upload"
							]
						},
						"description": "Upload invoice berupa file PDF."
					},
					"response": []
				},
				{
					"name": "Encrypted (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test for response message\r",
									"pm.test(\"Response message is 'Invoice upload initiated'\", function () {\r",
									"    pm.expect(pm.response.json().message.message).to.equal(\"Invoice upload initiated\");\r",
									"});\r",
									"\r",
									"// Test for content type header\r",
									"pm.test(\"Content-Type is present and is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "test_encrypted.pdf"
								},
								{
									"key": "password",
									"value": "password",
									"type": "text"
								},
								{
									"key": "skipAnalysis",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/invoices/upload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"upload"
							]
						},
						"description": "Upload invoice berupa file PDF."
					},
					"response": []
				},
				{
					"name": "Unauthorized Client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body has a message field\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Response body message is 'Unauthorized: Invalid credentials'\", function () {\r",
									"    pm.expect(pm.response.json().message).to.equal(\"Unauthorized: Invalid credentials\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "secret",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "test-valid.pdf"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/invoices/upload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reject > 20 MB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code is 413\", function () {\r",
									"    pm.response.to.have.status(413);\r",
									"});\r",
									"\r",
									"// pm.test(\"Response time is less than 5000ms\", function () {\r",
									"//     pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"// });\r",
									"\r",
									"pm.test(\"Response body has message field\", function () {\r",
									"    pm.response.to.have.jsonBody('message');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							},
							{
								"key": "client_id",
								"value": "surya",
								"type": "text",
								"disabled": true
							},
							{
								"key": "client_secret",
								"value": "suryasecret",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "test-30mb.pdf"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/invoices/upload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"upload"
							]
						}
					},
					"response": []
				}
			],
			"description": "_Endpoint_ `/api/invoice` berfungsi untuk melakukan fungsionalitas yang berkaitan dengan _invoice_."
		},
		{
			"name": "Purchase Order Upload",
			"item": [
				{
					"name": "Upload PO Succesful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test for response time\r",
									"pm.test(\"Response time is less than 10000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
									"});\r",
									"\r",
									"// Test for content type\r",
									"pm.test(\"Content-Type is present and is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// Test for message and invoice details\r",
									"pm.test(\"Response contains message and invoice details\", function () {\r",
									"    pm.expect(pm.response.json().message.message).to.equal(\"Purchase Order upload initiated\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "test-valid.pdf"
								},
								{
									"key": "",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/purchase-orders/upload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"purchase-orders",
								"upload"
							]
						},
						"description": "Upload invoice berupa file PDF."
					},
					"response": []
				},
				{
					"name": "Invalid File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code\r",
									"pm.test(\"Status code is 415\", function () {\r",
									"    pm.response.to.have.status(415);\r",
									"});\r",
									"\r",
									"// Test for response time\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// Test for content type\r",
									"pm.test(\"Content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// Test for message in the response body\r",
									"pm.test(\"Message is 'Invalid MIME type'\", function () {\r",
									"    pm.expect(pm.response.json().message).to.equal(\"Invalid MIME type\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "test-nonpdf.txt"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/purchase-orders/upload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"purchase-orders",
								"upload"
							]
						},
						"description": "Upload invoice berupa file PDF."
					},
					"response": []
				},
				{
					"name": "Missing File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test for response time\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// Test for the presence of message in the response body\r",
									"pm.test(\"Response contains message\", function () {\r",
									"    pm.expect(pm.response.json().message).to.exist;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/purchase-orders/upload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"purchase-orders",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Encrypted (No Password)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code\r",
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"// Test for response message\r",
									"pm.test(\"Response message is 'PDF is encrypted and requires a password'\", function () {\r",
									"    pm.expect(pm.response.json().message.message).to.equal(\"PDF is encrypted and requires a password\");\r",
									"});\r",
									"\r",
									"// Test for content type header\r",
									"pm.test(\"Content-Type is present and is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "test_encrypted.pdf"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/purchase-orders/upload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"purchase-orders",
								"upload"
							]
						},
						"description": "Upload invoice berupa file PDF."
					},
					"response": []
				},
				{
					"name": "Encrypted (Incorrect Password)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test for response message\r",
									"pm.test(\"Response message is 'Incorrect password for encrypted PDF'\", function () {\r",
									"    pm.expect(pm.response.json().message).to.equal(\"Incorrect password for encrypted PDF\");\r",
									"});\r",
									"\r",
									"// Test for content type header\r",
									"pm.test(\"Content-Type is present and is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "test_encrypted.pdf"
								},
								{
									"key": "password",
									"value": "wrong_password",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/invoices/upload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"upload"
							]
						},
						"description": "Upload invoice berupa file PDF."
					},
					"response": []
				},
				{
					"name": "Encrypted (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test for response message\r",
									"pm.test(\"Response message is 'Invoice upload initiated'\", function () {\r",
									"    pm.expect(pm.response.json().message.message).to.equal(\"Invoice upload initiated\");\r",
									"});\r",
									"\r",
									"// Test for content type header\r",
									"pm.test(\"Content-Type is present and is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "test_encrypted.pdf"
								},
								{
									"key": "password",
									"value": "password",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/invoices/upload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"upload"
							]
						},
						"description": "Upload invoice berupa file PDF."
					},
					"response": []
				},
				{
					"name": "Unauthorized Client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body has a message field\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Response body message is 'Unauthorized: Invalid credentials'\", function () {\r",
									"    pm.expect(pm.response.json().message).to.equal(\"Unauthorized: Invalid credentials\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "secret",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "postman-cloud:///1effe480-e564-4550-9930-7fdf7ce8d914"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/purchase-orders/upload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"purchase-orders",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reject > 20 MB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code is 413\", function () {\r",
									"    pm.response.to.have.status(413);\r",
									"});\r",
									"\r",
									"// pm.test(\"Response time is less than 5000ms\", function () {\r",
									"//     pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"// });\r",
									"\r",
									"pm.test(\"Response body has message field\", function () {\r",
									"    pm.response.to.have.jsonBody('message');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							},
							{
								"key": "client_id",
								"value": "surya",
								"type": "text",
								"disabled": true
							},
							{
								"key": "client_secret",
								"value": "suryasecret",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "test-30mb.pdf"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/purchase-orders/upload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"purchase-orders",
								"upload"
							]
						}
					},
					"response": []
				}
			],
			"description": "_Endpoint_ `/api/purchase-orders` berfungsi untuk melakukan fungsionalitas yang berkaitan dengan purchase order."
		},
		{
			"name": "Get Invoice",
			"item": [
				{
					"name": "get invoice by id analyzed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Newman/Postman Test Script - Response Structure Validation\r",
									"\r",
									"pm.test(\"Response has correct main structure\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    \r",
									"    // Check main structure\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData.data).to.have.property('documents');\r",
									"    pm.expect(jsonData.data).to.have.property('documentUrl');\r",
									"    \r",
									"    // Check if documents is an array\r",
									"    pm.expect(jsonData.data.documents).to.be.an('array');\r",
									"    pm.expect(jsonData.data.documents).to.have.length.greaterThan(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Document structure validation\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const document = jsonData.data.documents[0];\r",
									"    \r",
									"    // Check document has header and items\r",
									"    pm.expect(document).to.have.property('header');\r",
									"    pm.expect(document).to.have.property('items');\r",
									"    pm.expect(document.items).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Header structure validation\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const header = jsonData.data.documents[0].header;\r",
									"    \r",
									"    // Check header main sections\r",
									"    pm.expect(header).to.have.property('invoice_details');\r",
									"    pm.expect(header).to.have.property('vendor_details');\r",
									"    pm.expect(header).to.have.property('customer_details');\r",
									"    pm.expect(header).to.have.property('financial_details');\r",
									"});\r",
									"\r",
									"pm.test(\"Invoice details structure\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const invoiceDetails = jsonData.data.documents[0].header.invoice_details;\r",
									"    \r",
									"    pm.expect(invoiceDetails).to.have.property('invoice_number');\r",
									"    pm.expect(invoiceDetails).to.have.property('purchase_order_id');\r",
									"    pm.expect(invoiceDetails).to.have.property('invoice_date');\r",
									"    pm.expect(invoiceDetails).to.have.property('due_date');\r",
									"    pm.expect(invoiceDetails).to.have.property('payment_terms');\r",
									"    \r",
									"    // Validate date format if not null\r",
									"    if (invoiceDetails.invoice_date !== null) {\r",
									"        pm.expect(invoiceDetails.invoice_date).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
									"    }\r",
									"    if (invoiceDetails.due_date !== null) {\r",
									"        pm.expect(invoiceDetails.due_date).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Vendor details structure\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const vendorDetails = jsonData.data.documents[0].header.vendor_details;\r",
									"    \r",
									"    pm.expect(vendorDetails).to.have.property('name');\r",
									"    pm.expect(vendorDetails).to.have.property('address');\r",
									"    pm.expect(vendorDetails).to.have.property('recipient_name');\r",
									"    pm.expect(vendorDetails).to.have.property('tax_id');\r",
									"    \r",
									"    // Check data types\r",
									"    if (vendorDetails.name !== null) {\r",
									"        pm.expect(vendorDetails.name).to.be.a('string');\r",
									"    }\r",
									"    if (vendorDetails.address !== null) {\r",
									"        pm.expect(vendorDetails.address).to.be.a('string');\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Customer details structure\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const customerDetails = jsonData.data.documents[0].header.customer_details;\r",
									"    \r",
									"    pm.expect(customerDetails).to.have.property('id');\r",
									"    pm.expect(customerDetails).to.have.property('name');\r",
									"    pm.expect(customerDetails).to.have.property('recipient_name');\r",
									"    pm.expect(customerDetails).to.have.property('address');\r",
									"    pm.expect(customerDetails).to.have.property('tax_id');\r",
									"    \r",
									"    // Validate UUID format for ID if not null\r",
									"    if (customerDetails.id !== null) {\r",
									"        pm.expect(customerDetails.id).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Financial details structure\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const financialDetails = jsonData.data.documents[0].header.financial_details;\r",
									"    \r",
									"    pm.expect(financialDetails).to.have.property('currency');\r",
									"    pm.expect(financialDetails).to.have.property('total_amount');\r",
									"    pm.expect(financialDetails).to.have.property('subtotal_amount');\r",
									"    pm.expect(financialDetails).to.have.property('discount_amount');\r",
									"    pm.expect(financialDetails).to.have.property('total_tax_amount');\r",
									"    \r",
									"    // Check currency structure\r",
									"    pm.expect(financialDetails.currency).to.have.property('currency_symbol');\r",
									"    pm.expect(financialDetails.currency).to.have.property('currency_code');\r",
									"    \r",
									"    // Validate currency code format\r",
									"    if (financialDetails.currency.currency_code !== null) {\r",
									"        pm.expect(financialDetails.currency.currency_code).to.be.a('string');\r",
									"        pm.expect(financialDetails.currency.currency_code).to.have.length(3);\r",
									"    }\r",
									"    \r",
									"    // Validate amount formats (should be string numbers)\r",
									"    if (financialDetails.total_amount !== null) {\r",
									"        pm.expect(financialDetails.total_amount).to.be.a('string');\r",
									"        pm.expect(financialDetails.total_amount).to.match(/^\\d+(\\.\\d{2})?$/);\r",
									"    }\r",
									"    if (financialDetails.subtotal_amount !== null) {\r",
									"        pm.expect(financialDetails.subtotal_amount).to.be.a('string');\r",
									"        pm.expect(financialDetails.subtotal_amount).to.match(/^\\d+(\\.\\d{2})?$/);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Items array structure\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const items = jsonData.data.documents[0].items;\r",
									"    \r",
									"    pm.expect(items).to.be.an('array');\r",
									"    pm.expect(items).to.have.length.greaterThan(0);\r",
									"    \r",
									"    // Check each item structure\r",
									"    items.forEach((item, index) => {\r",
									"        pm.expect(item, `Item ${index}`).to.have.property('amount');\r",
									"        pm.expect(item, `Item ${index}`).to.have.property('description');\r",
									"        pm.expect(item, `Item ${index}`).to.have.property('quantity');\r",
									"        pm.expect(item, `Item ${index}`).to.have.property('unit');\r",
									"        pm.expect(item, `Item ${index}`).to.have.property('unit_price');\r",
									"        \r",
									"        // Validate data types\r",
									"        if (item.amount !== null) {\r",
									"            pm.expect(item.amount, `Item ${index} amount`).to.be.a('string');\r",
									"            pm.expect(item.amount, `Item ${index} amount`).to.match(/^\\d+(\\.\\d{2})?$/);\r",
									"        }\r",
									"        if (item.description !== null) {\r",
									"            pm.expect(item.description, `Item ${index} description`).to.be.a('string');\r",
									"        }\r",
									"        if (item.quantity !== null) {\r",
									"            pm.expect(item.quantity, `Item ${index} quantity`).to.be.a('number');\r",
									"        }\r",
									"        if (item.unit_price !== null) {\r",
									"            pm.expect(item.unit_price, `Item ${index} unit_price`).to.be.a('string');\r",
									"            pm.expect(item.unit_price, `Item ${index} unit_price`).to.match(/^\\d+(\\.\\d{2})?$/);\r",
									"        }\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Document URL validation\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    \r",
									"    pm.expect(jsonData.data.documentUrl).to.be.a('string');\r",
									"    pm.expect(jsonData.data.documentUrl).to.match(/^https?:\\/\\/.+/);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status and time validation\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000); // 5 seconds max\r",
									"});\r",
									"\r",
									"// Optional: Mathematical validation\r",
									"pm.test(\"Financial calculations validation\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const items = jsonData.data.documents[0].items;\r",
									"    const financialDetails = jsonData.data.documents[0].header.financial_details;\r",
									"    \r",
									"    // Calculate total from items\r",
									"    let calculatedTotal = 0;\r",
									"    items.forEach(item => {\r",
									"        if (item.amount !== null) {\r",
									"            calculatedTotal += parseFloat(item.amount);\r",
									"        }\r",
									"    });\r",
									"    \r",
									"    // Compare with subtotal_amount (allowing small floating point differences)\r",
									"    if (financialDetails.subtotal_amount !== null) {\r",
									"        const subtotal = parseFloat(financialDetails.subtotal_amount);\r",
									"        pm.expect(Math.abs(calculatedTotal - subtotal)).to.be.below(0.01);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/invoices/{{invoice_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"{{invoice_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get invoice by id processing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test for message in the response body\r",
									"pm.test(\"Message indicates purchase order is being processed\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.contains(\"process\");\r",
									"});\r",
									"\r",
									"// Test for empty array of documents\r",
									"pm.test(\"Documents array is empty\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.documents).to.be.an('array').that.is.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Document URL validation\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    \r",
									"    pm.expect(jsonData.data.documentUrl).to.be.a('string');\r",
									"    pm.expect(jsonData.data.documentUrl).to.match(/^https?:\\/\\/.+/);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/invoices/{{invoice_id_processing}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"{{invoice_id_processing}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get invoice by id failed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test for message field in the response body\r",
									"pm.test(\"Message field exists in the response body\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.message).to.exist;\r",
									"    pm.expect(responseBody.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"// Test for data field in the response body\r",
									"pm.test(\"Data field exists in the response body\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.data).to.exist;\r",
									"    pm.expect(responseBody.data).to.be.an('object');\r",
									"});\r",
									"\r",
									"// Test for documents field inside data field in the response body\r",
									"pm.test(\"Documents field exists inside data in the response body\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.data.documents).to.exist;\r",
									"    pm.expect(responseBody.data.documents).to.be.an('array');\r",
									"});\r",
									"pm.test(\"Document URL validation\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    \r",
									"    pm.expect(jsonData.data.documentUrl).to.be.a('string');\r",
									"    pm.expect(jsonData.data.documentUrl).to.match(/^https?:\\/\\/.+/);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/invoices/{{invoice_id_failed}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"{{invoice_id_failed}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get invoice by id forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"// Asserting the status code\r",
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"// Asserting the message in the response body\r",
									"pm.test(\"Verify the message in the response body\", function () {\r",
									"    pm.expect(response.message).to.equal(\"Forbidden: You do not have access to this invoice\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/invoices/{{invoice_id_forbidden}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"{{invoice_id_forbidden}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get invoice by invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"// Asserting the status code\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"// Asserting the message in the response body\r",
									"pm.test(\"Verify the message in the response body\", function () {\r",
									"    pm.expect(response.message).to.equal(\"Purchase order not found\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/purchase-orders/invalid-id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"purchase-orders",
								"invalid-id"
							]
						}
					},
					"response": []
				},
				{
					"name": "get invoice by id unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body has message field with value 'Unauthorized: Missing credentials'\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.message).to.equal(\"Unauthorized: Invalid credentials\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "wront",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "wrong_secret",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/invoices/{{invoice_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"{{invoice_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Invoice Status",
			"item": [
				{
					"name": "get invoice status by id success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Content type is application/json', function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test('Response body has id and status fields', function () {\r",
									"    pm.expect(response).to.have.property('id');\r",
									"    pm.expect(response).to.have.property('status');\r",
									"});\r",
									"\r",
									"pm.test(\"Status is 'Processing'\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.status).to.equal('Analyzed');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/invoices/status/{{invoice_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"status",
								"{{invoice_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get invoice status by id processing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Content type is application/json', function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test('Response body has id and status fields', function () {\r",
									"    pm.expect(response).to.have.property('id');\r",
									"    pm.expect(response).to.have.property('status');\r",
									"});\r",
									"pm.test(\"Status is 'Processing'\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.status).to.equal('Processing');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/invoices/status/{{invoice_id_processing}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"status",
								"{{invoice_id_processing}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get invoice status by id failed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Content type is application/json', function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test('Response body has id and status fields', function () {\r",
									"    pm.expect(response).to.have.property('id');\r",
									"    pm.expect(response).to.have.property('status');\r",
									"});\r",
									"\r",
									"pm.test(\"Status is 'Processing'\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.status).to.equal('Failed');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/invoices/status/{{invoice_id_failed}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"status",
								"{{invoice_id_failed}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get invoice status by id unathorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body has message field\", function () {\r",
									"    pm.expect(pm.response.json().message).to.exist;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "wrong_id",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "wrong_secret",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"usernames\": [\"fonmagnus\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/invoices/status/{{invoice_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"status",
								"{{invoice_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get invoice invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the status code\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"// Assert the response body\r",
									"pm.test(\"Response contains message: Invoice not found\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.message).to.equal(\"Invoice not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/invoices/status/invalid-invoice-id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"status",
								"invalid-invoice-id"
							]
						}
					},
					"response": []
				},
				{
					"name": "get invoice status by id forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code\r",
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"// Test for content type\r",
									"pm.test(\"Content-Type is present and is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// Test for message in the response body\r",
									"pm.test(\"Response body contains a forbidden message\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.message).to.include(\"Forbidden\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/invoices/status/{{invoice_id_forbidden}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"status",
								"{{invoice_id_forbidden}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Purchase Order",
			"item": [
				{
					"name": "get po by id analyzed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Newman/Postman Test Script - Purchase Order Response Structure Validation\r",
									"\r",
									"pm.test(\"Response has correct main structure\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    \r",
									"    // Check main structure\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData.data).to.have.property('documents');\r",
									"    pm.expect(jsonData.data).to.have.property('documentUrl');\r",
									"    \r",
									"    // Check if documents is an array\r",
									"    pm.expect(jsonData.data.documents).to.be.an('array');\r",
									"    pm.expect(jsonData.data.documents).to.have.length.greaterThan(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Document structure validation\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const document = jsonData.data.documents[0];\r",
									"    \r",
									"    // Check document has header and items\r",
									"    pm.expect(document).to.have.property('header');\r",
									"    pm.expect(document).to.have.property('items');\r",
									"    pm.expect(document.items).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Header structure validation\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const header = jsonData.data.documents[0].header;\r",
									"    \r",
									"    // Check header main sections for purchase order\r",
									"    pm.expect(header).to.have.property('purchase_order_details');\r",
									"    pm.expect(header).to.have.property('vendor_details');\r",
									"    pm.expect(header).to.have.property('customer_details');\r",
									"    pm.expect(header).to.have.property('financial_details');\r",
									"});\r",
									"\r",
									"pm.test(\"Purchase order details structure\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const purchaseOrderDetails = jsonData.data.documents[0].header.purchase_order_details;\r",
									"    \r",
									"    pm.expect(purchaseOrderDetails).to.have.property('purchase_order_id');\r",
									"    pm.expect(purchaseOrderDetails).to.have.property('due_date');\r",
									"    pm.expect(purchaseOrderDetails).to.have.property('payment_terms');\r",
									"    \r",
									"    // Validate date format if not null\r",
									"    if (purchaseOrderDetails.due_date !== null) {\r",
									"        pm.expect(purchaseOrderDetails.due_date).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Vendor details structure\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const vendorDetails = jsonData.data.documents[0].header.vendor_details;\r",
									"    \r",
									"    pm.expect(vendorDetails).to.have.property('name');\r",
									"    pm.expect(vendorDetails).to.have.property('address');\r",
									"    pm.expect(vendorDetails).to.have.property('contact_name');\r",
									"    pm.expect(vendorDetails).to.have.property('tax_id');\r",
									"    \r",
									"    // Check data types\r",
									"    if (vendorDetails.name !== null) {\r",
									"        pm.expect(vendorDetails.name).to.be.a('string');\r",
									"    }\r",
									"    if (vendorDetails.address !== null) {\r",
									"        pm.expect(vendorDetails.address).to.be.a('string');\r",
									"    }\r",
									"    if (vendorDetails.contact_name !== null) {\r",
									"        pm.expect(vendorDetails.contact_name).to.be.a('string');\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Customer details structure\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const customerDetails = jsonData.data.documents[0].header.customer_details;\r",
									"    \r",
									"    pm.expect(customerDetails).to.have.property('id');\r",
									"    pm.expect(customerDetails).to.have.property('name');\r",
									"    pm.expect(customerDetails).to.have.property('contact_name');\r",
									"    pm.expect(customerDetails).to.have.property('address');\r",
									"    pm.expect(customerDetails).to.have.property('tax_id');\r",
									"    \r",
									"    // Validate UUID format for ID if not null\r",
									"    if (customerDetails.id !== null) {\r",
									"        pm.expect(customerDetails.id).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);\r",
									"    }\r",
									"    \r",
									"    // Check data types\r",
									"    if (customerDetails.contact_name !== null) {\r",
									"        pm.expect(customerDetails.contact_name).to.be.a('string');\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Financial details structure\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const financialDetails = jsonData.data.documents[0].header.financial_details;\r",
									"    \r",
									"    pm.expect(financialDetails).to.have.property('currency');\r",
									"    pm.expect(financialDetails).to.have.property('total_amount');\r",
									"    pm.expect(financialDetails).to.have.property('subtotal_amount');\r",
									"    pm.expect(financialDetails).to.have.property('discount_amount');\r",
									"    pm.expect(financialDetails).to.have.property('total_tax_amount');\r",
									"    \r",
									"    // Check currency format (string for purchase order, not object like invoice)\r",
									"    if (financialDetails.currency !== null) {\r",
									"        pm.expect(financialDetails.currency).to.be.a('string');\r",
									"        pm.expect(financialDetails.currency).to.have.length(3); // USD, IDR, etc.\r",
									"    }\r",
									"    \r",
									"    // Validate amount formats (should be string numbers)\r",
									"    if (financialDetails.total_amount !== null) {\r",
									"        pm.expect(financialDetails.total_amount).to.be.a('string');\r",
									"        pm.expect(financialDetails.total_amount).to.match(/^\\d+(\\.\\d{2})?$/);\r",
									"    }\r",
									"    if (financialDetails.subtotal_amount !== null) {\r",
									"        pm.expect(financialDetails.subtotal_amount).to.be.a('string');\r",
									"        pm.expect(financialDetails.subtotal_amount).to.match(/^\\d+(\\.\\d{2})?$/);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Items array structure\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const items = jsonData.data.documents[0].items;\r",
									"    \r",
									"    pm.expect(items).to.be.an('array');\r",
									"    pm.expect(items).to.have.length.greaterThan(0);\r",
									"    \r",
									"    // Check each item structure\r",
									"    items.forEach((item, index) => {\r",
									"        pm.expect(item, `Item ${index}`).to.have.property('amount');\r",
									"        pm.expect(item, `Item ${index}`).to.have.property('description');\r",
									"        pm.expect(item, `Item ${index}`).to.have.property('quantity');\r",
									"        pm.expect(item, `Item ${index}`).to.have.property('unit');\r",
									"        pm.expect(item, `Item ${index}`).to.have.property('unit_price');\r",
									"        \r",
									"        // Validate data types\r",
									"        if (item.amount !== null) {\r",
									"            pm.expect(item.amount, `Item ${index} amount`).to.be.a('string');\r",
									"            pm.expect(item.amount, `Item ${index} amount`).to.match(/^\\d+(\\.\\d{2})?$/);\r",
									"        }\r",
									"        if (item.description !== null) {\r",
									"            pm.expect(item.description, `Item ${index} description`).to.be.a('string');\r",
									"        }\r",
									"        if (item.quantity !== null) {\r",
									"            pm.expect(item.quantity, `Item ${index} quantity`).to.be.a('number');\r",
									"        }\r",
									"        if (item.unit_price !== null) {\r",
									"            pm.expect(item.unit_price, `Item ${index} unit_price`).to.be.a('string');\r",
									"            pm.expect(item.unit_price, `Item ${index} unit_price`).to.match(/^\\d+(\\.\\d{2})?$/);\r",
									"        }\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Document URL validation\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    \r",
									"    pm.expect(jsonData.data.documentUrl).to.be.a('string');\r",
									"    pm.expect(jsonData.data.documentUrl).to.match(/^https?:\\/\\/.+/);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status and time validation\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000); // 5 seconds max\r",
									"});\r",
									"\r",
									"// Optional: Mathematical validation\r",
									"pm.test(\"Financial calculations validation\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const items = jsonData.data.documents[0].items;\r",
									"    const financialDetails = jsonData.data.documents[0].header.financial_details;\r",
									"    \r",
									"    // Calculate total from items\r",
									"    let calculatedTotal = 0;\r",
									"    items.forEach(item => {\r",
									"        if (item.amount !== null) {\r",
									"            calculatedTotal += parseFloat(item.amount);\r",
									"        }\r",
									"    });\r",
									"    \r",
									"    // Compare with subtotal_amount (allowing small floating point differences)\r",
									"    if (financialDetails.subtotal_amount !== null) {\r",
									"        const subtotal = parseFloat(financialDetails.subtotal_amount);\r",
									"        pm.expect(Math.abs(calculatedTotal - subtotal)).to.be.below(0.01);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/purchase-orders/{{po_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"purchase-orders",
								"{{po_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get po by id processing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test for message in the response body\r",
									"pm.test(\"Message indicates purchase order is being processed\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.contains(\"process\");\r",
									"});\r",
									"\r",
									"// Test for empty array of documents\r",
									"pm.test(\"Documents array is empty\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.documents).to.be.an('array').that.is.empty;\r",
									"});\r",
									"pm.test(\"Document URL validation\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    \r",
									"    pm.expect(jsonData.data.documentUrl).to.be.a('string');\r",
									"    pm.expect(jsonData.data.documentUrl).to.match(/^https?:\\/\\/.+/);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/purchase-orders/{{po_id_processing}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"purchase-orders",
								"{{po_id_processing}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get po by id failed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test for message field in the response body\r",
									"pm.test(\"Message field exists in the response body\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.message).to.exist;\r",
									"    pm.expect(responseBody.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"// Test for data field in the response body\r",
									"pm.test(\"Data field exists in the response body\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.data).to.exist;\r",
									"    pm.expect(responseBody.data).to.be.an('object');\r",
									"});\r",
									"\r",
									"// Test for documents field inside data field in the response body\r",
									"pm.test(\"Documents field exists inside data in the response body\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.data.documents).to.exist;\r",
									"    pm.expect(responseBody.data.documents).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Document URL validation\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    \r",
									"    pm.expect(jsonData.data.documentUrl).to.be.a('string');\r",
									"    pm.expect(jsonData.data.documentUrl).to.match(/^https?:\\/\\/.+/);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/purchase-orders/{{po_id_failed}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"purchase-orders",
								"{{po_id_failed}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get po by id forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"// Asserting the status code\r",
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"// Asserting the message in the response body\r",
									"pm.test(\"Verify the message in the response body\", function () {\r",
									"    pm.expect(response.message).to.equal(\"Forbidden: You do not have access to this purchase order\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/purchase-orders/{{po_id_forbidden}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"purchase-orders",
								"{{po_id_forbidden}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get po by invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"// Asserting the status code\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"// Asserting the message in the response body\r",
									"pm.test(\"Verify the message in the response body\", function () {\r",
									"    pm.expect(response.message).to.equal(\"Purchase order not found\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/purchase-orders/invalid-id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"purchase-orders",
								"invalid-id"
							]
						}
					},
					"response": []
				},
				{
					"name": "get po by id unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body has message field with value 'Unauthorized: Missing credentials'\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.message).to.equal(\"Unauthorized: Invalid credentials\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "wrong_id",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "wrong_secret",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/purchase-orders/{{po_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"purchase-orders",
								"{{po_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get PO Status",
			"item": [
				{
					"name": "get po status by id success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Content type is application/json', function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test('Response body has id and status fields', function () {\r",
									"    pm.expect(response).to.have.property('id');\r",
									"    pm.expect(response).to.have.property('status');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/purchase-orders/status/{{po_id}}/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"purchase-orders",
								"status",
								"{{po_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "get po status by id unathorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body has message field\", function () {\r",
									"    pm.expect(pm.response.json().message).to.exist;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "wrong_id",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "wrong_secret",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"usernames\": [\"fonmagnus\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/purchase-orders/status/{{po_id}}/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"purchase-orders",
								"status",
								"{{po_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "get po invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the status code\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"// Assert the response body\r",
									"pm.test(\"Response contains message: Purchase order not found\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.message).to.equal(\"Purchase order not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/purchase-orders/status/invalid-po-id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"purchase-orders",
								"status",
								"invalid-po-id",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "get po status by id forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code\r",
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"// Test for content type\r",
									"pm.test(\"Content-Type is present and is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// Test for message in the response body\r",
									"pm.test(\"Response body contains a forbidden message\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.message).to.include(\"Forbidden\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/purchase-orders/status/{{po_id_forbidden}}/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"purchase-orders",
								"status",
								"{{po_id_forbidden}}",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete Invoice",
			"item": [
				{
					"name": "Upload Invoice for Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present and is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response contains message and invoice details\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message.message).to.equal(\"Invoice upload initiated\");",
									"    pm.expect(jsonData.message.id).to.exist;",
									"});",
									"",
									"try {",
									"    const jsonData = pm.response.json();",
									"    const invoiceId = jsonData.message.id;",
									"",
									"    if (invoiceId) {",
									"        console.log(\"Menyimpan Invoice ID:\", invoiceId);",
									"        pm.environment.set(\"invoice_id_to_delete\", invoiceId);",
									"        pm.environment.set(\"statusRetryCount\", 0);",
									"",
									"        pm.test(\"Invoice ID stored successfully\", function() {",
									"            pm.expect(pm.environment.get(\"invoice_id_to_delete\")).to.equal(invoiceId);",
									"        });",
									"",
									"        console.log(\"Memulai pengecekan status...\");",
									"        postman.setNextRequest(\"Check Invoice Status\");",
									"",
									"    } else {",
									"        console.error(\"ID invoice tidak ditemukan dalam response!\");",
									"        pm.test(\"Failed to find Invoice ID in response\", function() {",
									"             throw new Error(\"Invoice ID not found in response message.id\");",
									"        });",
									"        postman.setNextRequest(null);",
									"    }",
									"} catch (e) {",
									"    console.error(\"Error parsing JSON or accessing ID:\", e);",
									"    pm.test(\"Failed to process response for storing Invoice ID\", function() {",
									"         throw e;",
									"     });",
									"     postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "test-valid.pdf"
								},
								{
									"key": "skipAnalysis",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/invoices/upload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"upload"
							]
						},
						"description": "Upload invoice with skipAnalysis=true for deletion test."
					},
					"response": []
				},
				{
					"name": "Check Invoice Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const maxRetries = 10;",
									"const retryDelay = 5000;",
									"const targetStatus = \"Analyzed\";",
									"",
									"let currentRetry = parseInt(pm.environment.get(\"statusRetryCount\") || \"0\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present and is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"try {",
									"    const jsonData = pm.response.json();",
									"    const currentStatus = jsonData.status;",
									"    const invoiceId = pm.environment.get(\"invoice_id_to_delete\");",
									"",
									"    console.log(\">>> DEBUG: Nilai 'currentStatus' dari API:\", currentStatus);",
									"    console.log(\">>> DEBUG: Tipe data 'currentStatus':\", typeof currentStatus);",
									"    console.log(\">>> DEBUG: Nilai 'targetStatus' yang dicari:\", targetStatus);",
									"",
									"    console.log(`[Percobaan ${currentRetry + 1}/${maxRetries}] Status Invoice ${invoiceId}: ${currentStatus}`);",
									"",
									"    pm.test(\"Response contains ID and Status\", function() {",
									"        pm.expect(jsonData.id).to.exist;",
									"        pm.expect(jsonData.status).to.exist;",
									"        pm.expect(jsonData.id).to.equal(invoiceId);",
									"    });",
									"",
									"    if (currentStatus === targetStatus) {",
									"        console.log(`Status '${targetStatus}' tercapai untuk Invoice ${invoiceId}. Melanjutkan ke Delete.`);",
									"        pm.test(`Invoice status reached '${targetStatus}'`, function() {",
									"            pm.expect(currentStatus).to.equal(targetStatus);",
									"        });",
									"        pm.environment.unset(\"statusRetryCount\");",
									"        postman.setNextRequest(\"Delete Invoice Successful\");",
									"",
									"    } else if (currentRetry < maxRetries) {",
									"        console.log(`Status belum '${targetStatus}'. Mencoba lagi dalam ${retryDelay / 1000} detik...`);",
									"        pm.environment.set(\"statusRetryCount\", currentRetry + 1);",
									"        setTimeout(() => {",
									"             postman.setNextRequest(\"Check Invoice Status\");",
									"        }, retryDelay);",
									"",
									"    } else {",
									"        console.error(`Gagal mencapai status '${targetStatus}' setelah ${maxRetries} percobaan untuk Invoice ${invoiceId}.`);",
									"        pm.test(`TIMEOUT: Invoice status did not reach '${targetStatus}' within ${maxRetries} retries`, function() {",
									"            throw new Error(`Status was '${currentStatus}', expected '${targetStatus}'. Max retries exceeded.`);",
									"        });",
									"        pm.environment.unset(\"statusRetryCount\");",
									"        postman.setNextRequest(null);",
									"    }",
									"",
									"} catch (e) {",
									"    console.error(\"Error processing status response:\", e);",
									"    pm.test(\"Failed to process status response\", function() {",
									"        throw e;",
									"    });",
									"    pm.environment.unset(\"statusRetryCount\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/invoices/status/{{invoice_id_to_delete}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"status",
								"{{invoice_id_to_delete}}"
							]
						},
						"description": "Polls the invoice status until it reaches 'Analyzed' or times out."
					},
					"response": []
				},
				{
					"name": "Delete Invoice Successful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present and is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response contains success message\", function () {",
									"    pm.expect(pm.response.json().message).to.equal(\"Invoice successfully deleted\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/invoices/{{invoice_id_to_delete}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"{{invoice_id_to_delete}}"
							]
						},
						"description": "Delete invoice using the ID obtained from the upload after status is confirmed 'Analyzed'."
					},
					"response": []
				},
				{
					"name": "Delete Invoice Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type is present and is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response contains not found message\", function () {",
									"    pm.expect(pm.response.json().message).to.equal(\"Invoice not found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/invoices/{{invoice_id_to_delete}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"{{invoice_id_to_delete}}"
							]
						},
						"description": "Attempt to delete an invoice that should no longer exist (e.g., after successful deletion)."
					},
					"response": []
				}
			],
			"description": "Tests for deleting invoices, including polling for 'Analyzed' status before deletion."
		},
		{
			"name": "Delete Purchase Order",
			"item": [
				{
					"name": "Upload PO for Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present and is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response contains message and purchase order details\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message.message).to.equal(\"Purchase Order upload initiated\");",
									"    pm.expect(jsonData.message.id).to.exist;",
									"});",
									"",
									"try {",
									"    const jsonData = pm.response.json();",
									"    const purchaseOrderId = jsonData.message.id;",
									"",
									"    if (purchaseOrderId) {",
									"        console.log(\"Menyimpan Purchase Order ID:\", purchaseOrderId);",
									"        pm.environment.set(\"purchase_order_id_to_delete\", purchaseOrderId);",
									"        pm.environment.set(\"statusRetryCount\", 0);",
									"",
									"        pm.test(\"Purchase Order ID stored successfully\", function() {",
									"            pm.expect(pm.environment.get(\"purchase_order_id_to_delete\")).to.equal(purchaseOrderId);",
									"        });",
									"",
									"        console.log(\"Memulai pengecekan status...\");",
									"        postman.setNextRequest(\"Check Purchase Order Status\");",
									"",
									"    } else {",
									"        console.error(\"ID purchase order tidak ditemukan dalam response!\");",
									"        pm.test(\"Failed to find Purchase Order ID in response\", function() {",
									"             throw new Error(\"Purchase Order ID not found in response message.id\");",
									"        });",
									"        postman.setNextRequest(null);",
									"    }",
									"} catch (e) {",
									"    console.error(\"Error parsing JSON or accessing ID:\", e);",
									"    pm.test(\"Failed to process response for storing Purchase Order ID\", function() {",
									"         throw e;",
									"     });",
									"     postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "test-valid.pdf"
								},
								{
									"key": "skipAnalysis",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/purchase-orders/upload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"purchase-orders",
								"upload"
							]
						},
						"description": "Upload invoice with skipAnalysis=true for deletion test."
					},
					"response": []
				},
				{
					"name": "Check PO Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const maxRetries = 10;",
									"const retryDelay = 5000;",
									"const targetStatus = \"Analyzed\";",
									"",
									"let currentRetry = parseInt(pm.environment.get(\"statusRetryCount\") || \"0\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present and is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"try {",
									"    const jsonData = pm.response.json();",
									"    const currentStatus = jsonData.status;",
									"    const purchaseOrderIdd = pm.environment.get(\"purchase_order_id_to_delete\");",
									"",
									"    console.log(\">>> DEBUG: Nilai 'currentStatus' dari API:\", currentStatus);",
									"    console.log(\">>> DEBUG: Tipe data 'currentStatus':\", typeof currentStatus);",
									"    console.log(\">>> DEBUG: Nilai 'targetStatus' yang dicari:\", targetStatus);",
									"",
									"    console.log(`[Percobaan ${currentRetry + 1}/${maxRetries}] Status Invoice ${purchaseOrderIdd}: ${currentStatus}`);",
									"",
									"    pm.test(\"Response contains ID and Status\", function() {",
									"        pm.expect(jsonData.id).to.exist;",
									"        pm.expect(jsonData.status).to.exist;",
									"        pm.expect(jsonData.id).to.equal(purchaseOrderIdd);",
									"    });",
									"",
									"    if (currentStatus === targetStatus) {",
									"        console.log(`Status '${targetStatus}' tercapai untuk Invoice ${purchaseOrderIdd}. Melanjutkan ke Delete.`);",
									"        pm.test(`Invoice status reached '${targetStatus}'`, function() {",
									"            pm.expect(currentStatus).to.equal(targetStatus);",
									"        });",
									"        pm.environment.unset(\"statusRetryCount\");",
									"        postman.setNextRequest(\"Delete Invoice Successful\");",
									"",
									"    } else if (currentRetry < maxRetries) {",
									"        console.log(`Status belum '${targetStatus}'. Mencoba lagi dalam ${retryDelay / 1000} detik...`);",
									"        pm.environment.set(\"statusRetryCount\", currentRetry + 1);",
									"        setTimeout(() => {",
									"             postman.setNextRequest(\"Check Invoice Status\");",
									"        }, retryDelay);",
									"",
									"    } else {",
									"        console.error(`Gagal mencapai status '${targetStatus}' setelah ${maxRetries} percobaan untuk Invoice ${purchaseOrderId}.`);",
									"        pm.test(`TIMEOUT: Invoice status did not reach '${targetStatus}' within ${maxRetries} retries`, function() {",
									"            throw new Error(`Status was '${currentStatus}', expected '${targetStatus}'. Max retries exceeded.`);",
									"        });",
									"        pm.environment.unset(\"statusRetryCount\");",
									"        postman.setNextRequest(null);",
									"    }",
									"",
									"} catch (e) {",
									"    console.error(\"Error processing status response:\", e);",
									"    pm.test(\"Failed to process status response\", function() {",
									"        throw e;",
									"    });",
									"    pm.environment.unset(\"statusRetryCount\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/purchase-orders/status/{{purchase_order_id_to_delete}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"purchase-orders",
								"status",
								"{{purchase_order_id_to_delete}}"
							]
						},
						"description": "Polls the invoice status until it reaches 'Analyzed' or times out."
					},
					"response": []
				},
				{
					"name": "Delete PO Successful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present and is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response contains success message\", function () {",
									"    pm.expect(pm.response.json().message).to.equal(\"Purchase order successfully deleted\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/purchase-orders/{{purchase_order_id_to_delete}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"purchase-orders",
								"{{purchase_order_id_to_delete}}"
							]
						},
						"description": "Delete invoice using the ID obtained from the upload after status is confirmed 'Analyzed'."
					},
					"response": []
				},
				{
					"name": "Delete PO Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type is present and is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response contains not found message\", function () {",
									"    pm.expect(pm.response.json().message).to.equal(\"Invoice not found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/invoices/{{invoice_id_to_delete}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"{{invoice_id_to_delete}}"
							]
						},
						"description": "Attempt to delete an invoice that should no longer exist (e.g., after successful deletion)."
					},
					"response": []
				}
			],
			"description": "Tests for deleting invoices, including polling for 'Analyzed' status before deletion."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}