{
	"info": {
		"_postman_id": "07f53277-f568-4c54-816e-5a422194b463",
		"name": "Functional Test",
		"description": "API Purchase Order & Invoice Reader fineksi dibuat untuk memberikan kemudahan bagi partner dalam menganalisis dan mengelola dokumen PO dan invoice yang mereka miliki.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29703395",
		"_collection_link": "https://ppl-a-6.postman.co/workspace/Sprint-1~28590573-857b-4507-94a4-b601aa70d10e/collection/29703395-07f53277-f568-4c54-816e-5a422194b463?action=share&source=collection_link&creator=29703395"
	},
	"item": [
		{
			"name": "Invoice Upload",
			"item": [
				{
					"name": "Upload Invoice Succesful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test for response time\r",
									"pm.test(\"Response time is less than 10000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
									"});\r",
									"\r",
									"// Test for content type\r",
									"pm.test(\"Content-Type is present and is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// Test for message and invoice details\r",
									"pm.test(\"Response contains message and invoice details\", function () {\r",
									"    pm.expect(pm.response.json().message.message).to.equal(\"Invoice upload initiated\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "test-valid.pdf"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/invoices/upload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"upload"
							]
						},
						"description": "Upload invoice berupa file PDF."
					},
					"response": []
				},
				{
					"name": "Invalid File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code\r",
									"pm.test(\"Status code is 415\", function () {\r",
									"    pm.response.to.have.status(415);\r",
									"});\r",
									"\r",
									"// Test for response time\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// Test for content type\r",
									"pm.test(\"Content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// Test for message in the response body\r",
									"pm.test(\"Message is 'Invalid MIME type'\", function () {\r",
									"    pm.expect(pm.response.json().message).to.equal(\"Invalid MIME type\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "test-nonpdf.txt"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/invoices/upload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"upload"
							]
						},
						"description": "Upload invoice berupa file PDF."
					},
					"response": []
				},
				{
					"name": "Missing File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test for response time\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// Test for the presence of message in the response body\r",
									"pm.test(\"Response contains message\", function () {\r",
									"    pm.expect(pm.response.json().message).to.exist;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/invoices/upload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Encrypted (No Password)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code\r",
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"// Test for response message\r",
									"pm.test(\"Response message is 'PDF is encrypted and requires a password'\", function () {\r",
									"    pm.expect(pm.response.json().message.message).to.equal(\"PDF is encrypted and requires a password\");\r",
									"});\r",
									"\r",
									"// Test for content type header\r",
									"pm.test(\"Content-Type is present and is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "test_encrypted.pdf"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/invoices/upload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"upload"
							]
						},
						"description": "Upload invoice berupa file PDF."
					},
					"response": []
				},
				{
					"name": "Encrypted (Incorrect Password)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test for response message\r",
									"pm.test(\"Response message is 'Incorrect password for encrypted PDF'\", function () {\r",
									"    pm.expect(pm.response.json().message).to.equal(\"Incorrect password for encrypted PDF\");\r",
									"});\r",
									"\r",
									"// Test for content type header\r",
									"pm.test(\"Content-Type is present and is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "test_encrypted.pdf"
								},
								{
									"key": "password",
									"value": "wrong_password",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/invoices/upload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"upload"
							]
						},
						"description": "Upload invoice berupa file PDF."
					},
					"response": []
				},
				{
					"name": "Encrypted (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test for response message\r",
									"pm.test(\"Response message is 'Invoice upload initiated'\", function () {\r",
									"    pm.expect(pm.response.json().message.message).to.equal(\"Invoice upload initiated\");\r",
									"});\r",
									"\r",
									"// Test for content type header\r",
									"pm.test(\"Content-Type is present and is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "test_encrypted.pdf"
								},
								{
									"key": "password",
									"value": "password",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/invoices/upload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"upload"
							]
						},
						"description": "Upload invoice berupa file PDF."
					},
					"response": []
				},
				{
					"name": "Unauthorized Client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body has a message field\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Response body message is 'Unauthorized: Invalid credentials'\", function () {\r",
									"    pm.expect(pm.response.json().message).to.equal(\"Unauthorized: Invalid credentials\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "secret",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "test-valid.pdf"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/invoices/upload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reject > 20 MB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code is 413\", function () {\r",
									"    pm.response.to.have.status(413);\r",
									"});\r",
									"\r",
									"// pm.test(\"Response time is less than 5000ms\", function () {\r",
									"//     pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"// });\r",
									"\r",
									"pm.test(\"Response body has message field\", function () {\r",
									"    pm.response.to.have.jsonBody('message');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							},
							{
								"key": "client_id",
								"value": "surya",
								"type": "text",
								"disabled": true
							},
							{
								"key": "client_secret",
								"value": "suryasecret",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "test-30mb.pdf"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/invoices/upload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"upload"
							]
						}
					},
					"response": []
				}
			],
			"description": "_Endpoint_ `/api/invoice` berfungsi untuk melakukan fungsionalitas yang berkaitan dengan _invoice_."
		},
		{
			"name": "Purchase Order Upload",
			"item": [
				{
					"name": "Upload PO Succesful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test for response time\r",
									"pm.test(\"Response time is less than 10000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
									"});\r",
									"\r",
									"// Test for content type\r",
									"pm.test(\"Content-Type is present and is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// Test for message and invoice details\r",
									"pm.test(\"Response contains message and invoice details\", function () {\r",
									"    pm.expect(pm.response.json().message.message).to.equal(\"Purchase Order upload initiated\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "test-valid.pdf"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/purchase-orders/upload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"purchase-orders",
								"upload"
							]
						},
						"description": "Upload invoice berupa file PDF."
					},
					"response": []
				},
				{
					"name": "Invalid File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code\r",
									"pm.test(\"Status code is 415\", function () {\r",
									"    pm.response.to.have.status(415);\r",
									"});\r",
									"\r",
									"// Test for response time\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// Test for content type\r",
									"pm.test(\"Content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// Test for message in the response body\r",
									"pm.test(\"Message is 'Invalid MIME type'\", function () {\r",
									"    pm.expect(pm.response.json().message).to.equal(\"Invalid MIME type\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "test-nonpdf.txt"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/purchase-orders/upload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"purchase-orders",
								"upload"
							]
						},
						"description": "Upload invoice berupa file PDF."
					},
					"response": []
				},
				{
					"name": "Missing File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test for response time\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// Test for the presence of message in the response body\r",
									"pm.test(\"Response contains message\", function () {\r",
									"    pm.expect(pm.response.json().message).to.exist;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/purchase-orders/upload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"purchase-orders",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Encrypted (No Password)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code\r",
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"// Test for response message\r",
									"pm.test(\"Response message is 'PDF is encrypted and requires a password'\", function () {\r",
									"    pm.expect(pm.response.json().message.message).to.equal(\"PDF is encrypted and requires a password\");\r",
									"});\r",
									"\r",
									"// Test for content type header\r",
									"pm.test(\"Content-Type is present and is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "test_encrypted.pdf"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/purchase-orders/upload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"purchase-orders",
								"upload"
							]
						},
						"description": "Upload invoice berupa file PDF."
					},
					"response": []
				},
				{
					"name": "Encrypted (Incorrect Password)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test for response message\r",
									"pm.test(\"Response message is 'Incorrect password for encrypted PDF'\", function () {\r",
									"    pm.expect(pm.response.json().message).to.equal(\"Incorrect password for encrypted PDF\");\r",
									"});\r",
									"\r",
									"// Test for content type header\r",
									"pm.test(\"Content-Type is present and is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "test_encrypted.pdf"
								},
								{
									"key": "password",
									"value": "wrong_password",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/invoices/upload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"upload"
							]
						},
						"description": "Upload invoice berupa file PDF."
					},
					"response": []
				},
				{
					"name": "Encrypted (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test for response message\r",
									"pm.test(\"Response message is 'Invoice upload initiated'\", function () {\r",
									"    pm.expect(pm.response.json().message.message).to.equal(\"Invoice upload initiated\");\r",
									"});\r",
									"\r",
									"// Test for content type header\r",
									"pm.test(\"Content-Type is present and is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "test_encrypted.pdf"
								},
								{
									"key": "password",
									"value": "password",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/invoices/upload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"upload"
							]
						},
						"description": "Upload invoice berupa file PDF."
					},
					"response": []
				},
				{
					"name": "Unauthorized Client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body has a message field\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Response body message is 'Unauthorized: Invalid credentials'\", function () {\r",
									"    pm.expect(pm.response.json().message).to.equal(\"Unauthorized: Invalid credentials\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "secret",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "postman-cloud:///1effe480-e564-4550-9930-7fdf7ce8d914"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/purchase-orders/upload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"purchase-orders",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reject > 20 MB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code is 413\", function () {\r",
									"    pm.response.to.have.status(413);\r",
									"});\r",
									"\r",
									"// pm.test(\"Response time is less than 5000ms\", function () {\r",
									"//     pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"// });\r",
									"\r",
									"pm.test(\"Response body has message field\", function () {\r",
									"    pm.response.to.have.jsonBody('message');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							},
							{
								"key": "client_id",
								"value": "surya",
								"type": "text",
								"disabled": true
							},
							{
								"key": "client_secret",
								"value": "suryasecret",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "test-30mb.pdf"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/purchase-orders/upload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"purchase-orders",
								"upload"
							]
						}
					},
					"response": []
				}
			],
			"description": "_Endpoint_ `/api/purchase-orders` berfungsi untuk melakukan fungsionalitas yang berkaitan dengan purchase order."
		},
		{
			"name": "Get Invoice Status",
			"item": [
				{
					"name": "get invoice status by id success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Content type is application/json', function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test('Response body has id and status fields', function () {\r",
									"    pm.expect(response).to.have.property('id');\r",
									"    pm.expect(response).to.have.property('status');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/invoices/{{invoice_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"{{invoice_id}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "get invoice status by id unathorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body has message field\", function () {\r",
									"    pm.expect(pm.response.json().message).to.exist;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "wrong_id",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "wrong_secret",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"usernames\": [\"fonmagnus\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/invoices/{{invoice_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"{{invoice_id}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "get invoice invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the status code\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"// Assert the response body\r",
									"pm.test(\"Response contains message: Invoice not found\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.message).to.equal(\"Invoice not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/invoices/invalid-invoice-id/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"invalid-invoice-id",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "get invoice status by id forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code\r",
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"// Test for content type\r",
									"pm.test(\"Content-Type is present and is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// Test for message in the response body\r",
									"pm.test(\"Response body contains a forbidden message\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.message).to.include(\"Forbidden\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/invoices/{{invoice_id_forbidden}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"{{invoice_id_forbidden}}",
								"status"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get PO Status",
			"item": [
				{
					"name": "get po status by id success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Content type is application/json', function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test('Response body has id and status fields', function () {\r",
									"    pm.expect(response).to.have.property('id');\r",
									"    pm.expect(response).to.have.property('status');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/purchase-orders/status/{{po_id}}/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"purchase-orders",
								"status",
								"{{po_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "get po status by id unathorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body has message field\", function () {\r",
									"    pm.expect(pm.response.json().message).to.exist;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "wrong_id",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "wrong_secret",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"usernames\": [\"fonmagnus\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/purchase-orders/status/{{po_id}}/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"purchase-orders",
								"status",
								"{{po_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "get po invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the status code\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"// Assert the response body\r",
									"pm.test(\"Response contains message: Purchase order not found\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.message).to.equal(\"Purchase order not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/purchase-orders/status/invalid-po-id/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"purchase-orders",
								"status",
								"invalid-po-id",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "get po status by id forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code\r",
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"// Test for content type\r",
									"pm.test(\"Content-Type is present and is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// Test for message in the response body\r",
									"pm.test(\"Response body contains a forbidden message\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.message).to.include(\"Forbidden\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/purchase-orders/status/{{po_id_forbidden}}/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"purchase-orders",
								"status",
								"{{po_id_forbidden}}",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Purchase Order",
			"item": [
				{
					"name": "get po by id analyzed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Asserting the status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Asserting the presence of data.documents array in the response body\r",
									"pm.test(\"Response body has data.documents array\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.data.documents).to.be.an('array');\r",
									"    pm.expect(responseBody.data.documents).to.have.lengthOf.at.least(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/purchase-orders/{{po_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"purchase-orders",
								"{{po_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get po by id processing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test for message in the response body\r",
									"pm.test(\"Message indicates purchase order is being processed\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.contains(\"process\");\r",
									"});\r",
									"\r",
									"// Test for empty array of documents\r",
									"pm.test(\"Documents array is empty\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.documents).to.be.an('array').that.is.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/purchase-orders/{{po_id_processing}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"purchase-orders",
								"{{po_id_processing}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get po by id failed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test for message field in the response body\r",
									"pm.test(\"Message field exists in the response body\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.message).to.exist;\r",
									"    pm.expect(responseBody.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"// Test for data field in the response body\r",
									"pm.test(\"Data field exists in the response body\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.data).to.exist;\r",
									"    pm.expect(responseBody.data).to.be.an('object');\r",
									"});\r",
									"\r",
									"// Test for documents field inside data field in the response body\r",
									"pm.test(\"Documents field exists inside data in the response body\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.data.documents).to.exist;\r",
									"    pm.expect(responseBody.data.documents).to.be.an('array');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/purchase-orders/{{po_id_failed}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"purchase-orders",
								"{{po_id_failed}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get po by id forbidden",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/purchase-orders/{{po_id_forbidden}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"purchase-orders",
								"{{po_id_forbidden}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get po by invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"// Asserting the status code\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"// Asserting the message in the response body\r",
									"pm.test(\"Verify the message in the response body\", function () {\r",
									"    pm.expect(response.message).to.equal(\"Purchase order not found\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/purchase-orders/invalid-id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"purchase-orders",
								"invalid-id"
							]
						}
					},
					"response": []
				},
				{
					"name": "get po by id unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body has message field with value 'Unauthorized: Missing credentials'\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.message).to.equal(\"Unauthorized: Missing credentials\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/purchase-orders/{{po_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"purchase-orders",
								"{{po_id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}